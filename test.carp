;; (defmacro defi [name value]
;;   (do
;;     (eval (list 'def name value))
;;     (eval
;;       (list 'macro-log
;;         (str 'name ": " (list 'type name))))
;;         ))

(defmacro old-def [key value]
  (eval (list 'def key value)))



(defmacro log [arg]
  (macro-log arg))


(defmacro print-type [name]
  (do
    (macro-log
      (str
        name
        ": "
        (eval (list 'type name))))
    ))

;; (defi hello 1)
(def hello 1)
;; (macro-log (type hello))
(print-type hello)
(Dynamic.Path.absolute "hi")

(defmodule Hello
  (def world 1))

(load "examples/simple-1.carp")
;; (save-docs-internal '(Hello Simple1) ["examples/simple-1.carp1"])
(save-docs Int Hello )
;; (macro-log
;;     (parse
;;       (str
;;         "(do "
;;         (read-file "a-file.carp")
;;         ")"
;;         )))