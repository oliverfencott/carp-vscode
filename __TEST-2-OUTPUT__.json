[{
  "type": null,
  "info": null,
  "meta": {},
  "bindings": [{
      "symbol": "=",
      "type": "(Fn [(Ref (Array a) b), (Ref (Array a) b)] Bool)",
      "info": {
        "line": 149,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"compares two arrays.\\n\"",
        "implements": "(= =)"
      }
    },
    {
      "symbol": "_Lambda_sum_16_env__?_?_?",
      "type": "(Fn [a, (Ref a b)] a c)",
      "info": {
        "line": 191,
        "column": 20,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "all?",
      "type": "(Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (Array a) b)] Bool)",
      "info": {
        "line": 86,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"checks whether all of the elements in `a` match the function `f`.\\n\""
      }
    },
    {
      "symbol": "allocate",
      "type": "(Fn [Int] (Array a))",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.allocate.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"allocates an uninitialized array. You can initialize members using [`aset-uninitialized`](#aset-uninitialized).\""
      }
    },
    {
      "symbol": "allocate__Array__uint8_t",
      "type": "(Fn [Int] (Array (Array Byte)))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.allocate__Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "allocate__Char",
      "type": "(Fn [Int] (Array Char))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.allocate__Char template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "allocate__Result__Uint16_Array__uint8_t",
      "type": "(Fn [Int] (Array (Result Uint16 (Array Byte))))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.allocate__Result__Uint16_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "allocate__Result__Uint32_Array__uint8_t",
      "type": "(Fn [Int] (Array (Result Uint32 (Array Byte))))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.allocate__Result__Uint32_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "allocate__Result__Uint64_Array__uint8_t",
      "type": "(Fn [Int] (Array (Result Uint64 (Array Byte))))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.allocate__Result__Uint64_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "allocate__String",
      "type": "(Fn [Int] (Array String))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.allocate__String template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "allocate__Uint16",
      "type": "(Fn [Int] (Array Uint16))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.allocate__Uint16 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "allocate__Uint32",
      "type": "(Fn [Int] (Array Uint32))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.allocate__Uint32 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "allocate__Uint64",
      "type": "(Fn [Int] (Array Uint64))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.allocate__Uint64 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "allocate__int",
      "type": "(Fn [Int] (Array Int))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.allocate__int template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "allocate__uint8_t",
      "type": "(Fn [Int] (Array Byte))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.allocate__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "any?",
      "type": "(Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (Array a) b)] Bool)",
      "info": {
        "line": 76,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"checks whether any of the elements in `a` match the function `f`.\\n\""
      }
    },
    {
      "symbol": "aset",
      "type": "(Fn [(Array a), Int, a] (Array a))",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.aset.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"sets an array element at the index `n` to a new value.\""
      }
    },
    {
      "symbol": "aset!",
      "type": "(Fn [(Ref (Array a) b), Int, a] ())",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.aset!.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"sets an array element at the index `n` to a new value in place.\""
      }
    },
    {
      "symbol": "aset!__Char",
      "type": "(Fn [(Ref (Array Char) a), Int, Char] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset!__Char template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aset-uninitialized!",
      "type": "(Fn [(Ref (Array a) b), Int, a] ())",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.aset-uninitialized!.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"sets an uninitialized array member. The old member will not be deleted.\""
      }
    },
    {
      "symbol": "aset-uninitialized!__Array__uint8_t",
      "type": "(Fn [(Ref (Array (Array Byte)) a), Int, (Array Byte)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset-uninitialized!__Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aset-uninitialized!__Char",
      "type": "(Fn [(Ref (Array Char) a), Int, Char] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset-uninitialized!__Char template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aset-uninitialized!__Result__Uint16_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint16 (Array Byte))) a), Int, (Result Uint16 (Array Byte))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset-uninitialized!__Result__Uint16_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aset-uninitialized!__Result__Uint32_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint32 (Array Byte))) a), Int, (Result Uint32 (Array Byte))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset-uninitialized!__Result__Uint32_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aset-uninitialized!__Result__Uint64_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint64 (Array Byte))) a), Int, (Result Uint64 (Array Byte))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset-uninitialized!__Result__Uint64_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aset-uninitialized!__String",
      "type": "(Fn [(Ref (Array String) a), Int, String] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset-uninitialized!__String template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aset-uninitialized!__Uint16",
      "type": "(Fn [(Ref (Array Uint16) a), Int, Uint16] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset-uninitialized!__Uint16 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aset-uninitialized!__Uint32",
      "type": "(Fn [(Ref (Array Uint32) a), Int, Uint32] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset-uninitialized!__Uint32 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aset-uninitialized!__Uint64",
      "type": "(Fn [(Ref (Array Uint64) a), Int, Uint64] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset-uninitialized!__Uint64 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aset-uninitialized!__int",
      "type": "(Fn [(Ref (Array Int) a), Int, Int] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset-uninitialized!__int template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aset-uninitialized!__uint8_t",
      "type": "(Fn [(Ref (Array Byte) a), Int, Byte] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.aset-uninitialized!__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "aupdate",
      "type": "(Fn [(Array a), Int, (Ref (Fn [a] a b) c)] (Array a))",
      "info": {
        "line": 258,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"transmutes (i.e. updates) the element at index `i` of an array `a` using the function `f`.\\n\""
      }
    },
    {
      "symbol": "aupdate!",
      "type": "(Fn [(Ref (Array a) b), Int, (Ref (Fn [a] a c) d)] ())",
      "info": {
        "line": 264,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"transmutes (i.e. updates) the element at index `i` of an array `a` using the function `f` in place.\\n\""
      }
    },
    {
      "symbol": "concat",
      "type": "(Fn [(Ref (Array (Array a)) b)] (Array a))",
      "info": {
        "line": 350,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"returns a new array which is the concatenation of the provided nested array `xs`.\\n\""
      }
    },
    {
      "symbol": "contains?",
      "type": "(Fn [(Ref (Array a) b), (Ref a b)] Bool)",
      "info": {
        "line": 404,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"checks wether an element exists in the array.\\n\""
      }
    },
    {
      "symbol": "copy",
      "type": "(Fn [(Ref (Array a) b)] (Array a))",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.copy.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"copies an array.\""
      }
    },
    {
      "symbol": "copy-filter",
      "type": "(Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (Array a) e)] (Array a))",
      "info": {
        "line": 401,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"filters the elements in an array.\\n\\nIt will create a copy. If you want to avoid that, consider using [`endo-filter`](#endo-filter) instead.\\n\""
      }
    },
    {
      "symbol": "copy-filter__Result__Uint16_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint16 (Array Byte)) a)] Bool) StaticLifetime), (Ref (Array (Result Uint16 (Array Byte))) b)] (Array (Result Uint16 (Array Byte))))",
      "info": {
        "line": 371,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-filter__Result__Uint32_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint32 (Array Byte)) a)] Bool) StaticLifetime), (Ref (Array (Result Uint32 (Array Byte))) b)] (Array (Result Uint32 (Array Byte))))",
      "info": {
        "line": 371,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-filter__Result__Uint64_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint64 (Array Byte)) a)] Bool) StaticLifetime), (Ref (Array (Result Uint64 (Array Byte))) b)] (Array (Result Uint64 (Array Byte))))",
      "info": {
        "line": 371,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map",
      "type": "(Fn [(Ref (Fn [(Ref a b)] c d) e), (Ref (Array a) b)] (Array c))",
      "info": {
        "line": 303,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"maps over an array `a` using the function `f`.\\n\\nThis function copies the array. If you don\\8217t want that, use [`endo-map`](#endo-map).\\n\""
      }
    },
    {
      "symbol": "copy-map__Array__String_String",
      "type": "(Fn [(Ref (Fn [(Ref (Array String) a)] String b) c), (Ref (Array (Array String)) a)] (Array String))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Array__uint8_t_Result__Uint16_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Array Byte) a)] (Result Uint16 (Array Byte))) b), (Ref (Array (Array Byte)) a)] (Array (Result Uint16 (Array Byte))))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Array__uint8_t_Result__Uint32_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Array Byte) a)] (Result Uint32 (Array Byte))) b), (Ref (Array (Array Byte)) a)] (Array (Result Uint32 (Array Byte))))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Array__uint8_t_Result__Uint64_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Array Byte) a)] (Result Uint64 (Array Byte))) b), (Ref (Array (Array Byte)) a)] (Array (Result Uint64 (Array Byte))))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Array__uint8_t_Uint16",
      "type": "(Fn [(Ref (Fn [(Ref (Array Byte) a)] Uint16 b) c), (Ref (Array (Array Byte)) a)] (Array Uint16))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Array__uint8_t_Uint32",
      "type": "(Fn [(Ref (Fn [(Ref (Array Byte) a)] Uint32 b) c), (Ref (Array (Array Byte)) a)] (Array Uint32))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Array__uint8_t_Uint64",
      "type": "(Fn [(Ref (Fn [(Ref (Array Byte) a)] Uint64 b) c), (Ref (Array (Array Byte)) a)] (Array Uint64))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Array__uint8_t_int",
      "type": "(Fn [(Ref (Fn [(Ref (Array Byte) a)] Int) StaticLifetime), (Ref (Array (Array Byte)) a)] (Array Int))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Result__Uint16_Array__uint8_t_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint16 (Array Byte)) a)] (Array Byte)) StaticLifetime), (Ref (Array (Result Uint16 (Array Byte))) a)] (Array (Array Byte)))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Result__Uint16_Array__uint8_t_Uint16",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint16 (Array Byte)) a)] Uint16) StaticLifetime), (Ref (Array (Result Uint16 (Array Byte))) a)] (Array Uint16))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Result__Uint32_Array__uint8_t_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint32 (Array Byte)) a)] (Array Byte)) StaticLifetime), (Ref (Array (Result Uint32 (Array Byte))) a)] (Array (Array Byte)))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Result__Uint32_Array__uint8_t_Uint32",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint32 (Array Byte)) a)] Uint32) StaticLifetime), (Ref (Array (Result Uint32 (Array Byte))) a)] (Array Uint32))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Result__Uint64_Array__uint8_t_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint64 (Array Byte)) a)] (Array Byte)) StaticLifetime), (Ref (Array (Result Uint64 (Array Byte))) a)] (Array (Array Byte)))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Result__Uint64_Array__uint8_t_Uint64",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint64 (Array Byte)) a)] Uint64) StaticLifetime), (Ref (Array (Result Uint64 (Array Byte))) a)] (Array Uint64))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Uint16_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref Uint16 a)] (Array Byte) b) c), (Ref (Array Uint16) a)] (Array (Array Byte)))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Uint16_uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref Uint16 a)] Byte) StaticLifetime), (Ref (Array Uint16) a)] (Array Byte))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Uint32_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref Uint32 a)] (Array Byte) b) c), (Ref (Array Uint32) a)] (Array (Array Byte)))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Uint32_uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref Uint32 a)] Byte) StaticLifetime), (Ref (Array Uint32) a)] (Array Byte))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Uint64_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref Uint64 a)] (Array Byte) b) c), (Ref (Array Uint64) a)] (Array (Array Byte)))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy-map__Uint64_uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref Uint64 a)] Byte) StaticLifetime), (Ref (Array Uint64) a)] (Array Byte))",
      "info": {
        "line": 273,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy__Result__Uint16_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint16 (Array Byte))) a)] (Array (Result Uint16 (Array Byte))))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.copy__Result__Uint16_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy__Result__Uint32_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint32 (Array Byte))) a)] (Array (Result Uint32 (Array Byte))))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.copy__Result__Uint32_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy__Result__Uint64_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint64 (Array Byte))) a)] (Array (Result Uint64 (Array Byte))))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.copy__Result__Uint64_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy__Uint16",
      "type": "(Fn [(Ref (Array Uint16) a)] (Array Uint16))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.copy__Uint16 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy__Uint32",
      "type": "(Fn [(Ref (Array Uint32) a)] (Array Uint32))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.copy__Uint32 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy__Uint64",
      "type": "(Fn [(Ref (Array Uint64) a)] (Array Uint64))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.copy__Uint64 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "copy__uint8_t",
      "type": "(Fn [(Ref (Array Byte) a)] (Array Byte))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.copy__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete",
      "type": "(Fn [(Array a)] ())",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.delete.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"deletes an array. This function should usually not be called manually.\""
      }
    },
    {
      "symbol": "delete__?",
      "type": "(Fn [(Array a)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__? template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Array__String",
      "type": "(Fn [(Array (Array String))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Array__String template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Array__a",
      "type": "(Fn [(Array (Array a))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Array__a template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Array__r27",
      "type": "(Fn [(Array (Array a))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Array__r27 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Array__uint8_t",
      "type": "(Fn [(Array (Array Byte))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Bucket__r2_r3",
      "type": "(Fn [(Array (Bucket a b))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Bucket__r2_r3 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Bucket__r61_r62",
      "type": "(Fn [(Array (Bucket a b))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Bucket__r61_r62 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Char",
      "type": "(Fn [(Array Char)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Char template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Pair__a_b",
      "type": "(Fn [(Array (Pair a b))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Pair__a_b template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Pair__int_r12",
      "type": "(Fn [(Array (Pair Int a))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Pair__int_r12 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Pair__r12_r13",
      "type": "(Fn [(Array (Pair a b))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Pair__r12_r13 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Pair__r13_r12",
      "type": "(Fn [(Array (Pair a b))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Pair__r13_r12 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Pair__r21_r23",
      "type": "(Fn [(Array (Pair a b))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Pair__r21_r23 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Pair__r22_r27",
      "type": "(Fn [(Array (Pair a b))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Pair__r22_r27 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Pair__r2_r3",
      "type": "(Fn [(Array (Pair a b))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Pair__r2_r3 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Pair__r37_r38",
      "type": "(Fn [(Array (Pair a b))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Pair__r37_r38 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Result__Uint16_Array__uint8_t",
      "type": "(Fn [(Array (Result Uint16 (Array Byte)))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Result__Uint16_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Result__Uint32_Array__uint8_t",
      "type": "(Fn [(Array (Result Uint32 (Array Byte)))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Result__Uint32_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Result__Uint64_Array__uint8_t",
      "type": "(Fn [(Array (Result Uint64 (Array Byte)))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Result__Uint64_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Result__r18_r10",
      "type": "(Fn [(Array (Result a b))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Result__r18_r10 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Result__r35_Array__r27",
      "type": "(Fn [(Array (Result a (Array b)))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Result__r35_Array__r27 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__SetBucket__r2",
      "type": "(Fn [(Array (SetBucket a))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__SetBucket__r2 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__SetBucket__r53",
      "type": "(Fn [(Array (SetBucket a))] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__SetBucket__r53 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__String",
      "type": "(Fn [(Array String)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__String template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Uint16",
      "type": "(Fn [(Array Uint16)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Uint16 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Uint32",
      "type": "(Fn [(Array Uint32)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Uint32 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__Uint64",
      "type": "(Fn [(Array Uint64)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__Uint64 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__int",
      "type": "(Fn [(Array Int)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__int template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "delete__uint8_t",
      "type": "(Fn [(Array Byte)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.delete__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "element-count",
      "type": "(Fn [(Ref (Array a) b), (Ref a b)] Int)",
      "info": {
        "line": 238,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"counts the occurrences of element `e` in an array.\\n\""
      }
    },
    {
      "symbol": "empty?",
      "type": "(Fn [(Ref (Array a) b)] Bool)",
      "info": {
        "line": 71,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"checks whether the array `a` is empty.\\n\"",
        "implements": "(empty? empty?)"
      }
    },
    {
      "symbol": "endo-filter",
      "type": "(Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Array a)] (Array a))",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.endo-filter.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"filters array members using a function. This function takes ownership.\""
      }
    },
    {
      "symbol": "endo-filter__Result__Uint16_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint16 (Array Byte)) a)] Bool) StaticLifetime), (Array (Result Uint16 (Array Byte)))] (Array (Result Uint16 (Array Byte))))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.endo-filter__Result__Uint16_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "endo-filter__Result__Uint32_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint32 (Array Byte)) a)] Bool) StaticLifetime), (Array (Result Uint32 (Array Byte)))] (Array (Result Uint32 (Array Byte))))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.endo-filter__Result__Uint32_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "endo-filter__Result__Uint64_Array__uint8_t",
      "type": "(Fn [(Ref (Fn [(Ref (Result Uint64 (Array Byte)) a)] Bool) StaticLifetime), (Array (Result Uint64 (Array Byte)))] (Array (Result Uint64 (Array Byte))))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.endo-filter__Result__Uint64_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "endo-filter__String",
      "type": "(Fn [(Ref (Fn [(Ref String a)] Bool b) c), (Array String)] (Array String))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.endo-filter__String template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "endo-map",
      "type": "(Fn [(Ref (Fn [a] a b) c), (Array a)] (Array a))",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.endo-map.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"applies a function `f` to an array `a`. The type of the elements cannot change.\""
      }
    },
    {
      "symbol": "endo-scan",
      "type": "(Fn [(Ref (Fn [(Ref a b), (Ref a c)] a d) e), (Array a)] (Array a))",
      "info": {
        "line": 63,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"Like `Array.scan`, but uses the first element of the array as the starting value.\\nAlso does not create a new array, but reuses the initial one instead (by taking ownership over `xs`.)\\n\\nFor example, an endo-scan using `Int.+` over the array [1 1 1 1 1] will return [1 2 3 4 5]\\n\""
      }
    },
    {
      "symbol": "enumerated",
      "type": "(Fn [(Ref (Array a) b)] (Array (Pair Int a)))",
      "info": {
        "line": 367,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"creates a new array of `Pair`s where the first position is the index and the second position is the element from the original array `xs`.\\n\""
      }
    },
    {
      "symbol": "find",
      "type": "(Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (Array a) b)] (Maybe a))",
      "info": {
        "line": 98,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"finds an element in `a` that matches the function `f` and wraps it in a `Just`.\\n\\nIf it doesn\\8217t find an element, `Nothing` will be returned.\\n\""
      }
    },
    {
      "symbol": "find-index",
      "type": "(Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (Array a) b)] (Maybe Int))",
      "info": {
        "line": 110,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"finds the index of the first element in `a` that matches the function `f` and wraps it in a `Just`.\\n\\nIf it doesn\\8217t find an index, `Nothing` will be returned.\\n\""
      }
    },
    {
      "symbol": "first",
      "type": "(Fn [(Ref (Array a) b)] (Maybe a))",
      "info": {
        "line": 128,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"takes the first element of an array and returns a `Just`.\\n\\nReturns `Nothing` if the array is empty.\\n\""
      }
    },
    {
      "symbol": "from-static",
      "type": "(Fn [(Ref (StaticArray a) b)] (Array a))",
      "info": {
        "line": 449,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"Turns a `StaticArray` into an `Array`. Copies elements.\\n\""
      }
    },
    {
      "symbol": "index-of",
      "type": "(Fn [(Ref (Array a) b), (Ref a b)] (Maybe Int))",
      "info": {
        "line": 228,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"gets the index of element `e` in an array and wraps it on a `Just`.\\n\\nIf the element is not found, returns `Nothing`\\n\""
      }
    },
    {
      "symbol": "last",
      "type": "(Fn [(Ref (Array a) b)] (Maybe a))",
      "info": {
        "line": 143,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"takes the last element of an array and returns a `Just`.\\n\\nReturns `Nothing` if the array is empty.\\n\""
      }
    },
    {
      "symbol": "length",
      "type": "(Fn [(Ref (Array a) b)] Int)",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.length.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"gets the length of the array.\""
      }
    },
    {
      "symbol": "length__Array__String",
      "type": "(Fn [(Ref (Array (Array String)) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__Array__String template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "length__Array__uint8_t",
      "type": "(Fn [(Ref (Array (Array Byte)) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "length__Char",
      "type": "(Fn [(Ref (Array Char) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__Char template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "length__Result__Uint16_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint16 (Array Byte))) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__Result__Uint16_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "length__Result__Uint32_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint32 (Array Byte))) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__Result__Uint32_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "length__Result__Uint64_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint64 (Array Byte))) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__Result__Uint64_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "length__String",
      "type": "(Fn [(Ref (Array String) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__String template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "length__Uint16",
      "type": "(Fn [(Ref (Array Uint16) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__Uint16 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "length__Uint32",
      "type": "(Fn [(Ref (Array Uint32) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__Uint32 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "length__Uint64",
      "type": "(Fn [(Ref (Array Uint64) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__Uint64 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "length__int",
      "type": "(Fn [(Ref (Array Int) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__int template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "length__uint8_t",
      "type": "(Fn [(Ref (Array Byte) a)] Int)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.length__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "map-reduce",
      "type": "(Fn [(Ref (Fn [(Ref a b), (Ref c d)] (Pair a e) f) g), a, (Ref (Array c) d)] (Pair a (Array e)))",
      "info": {
        "line": 469,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"reduces an array `a` by invoking the function `f` on each\\nelement, while keeping an accumulator and a list.\\n\\nReturns a `Pair` where the first element is the mapped array and the second one\\nis the final accumulator.\\n\\nThe function `f` receives two arguments: the first one is the accumulator, and\\nthe second one is the element. `f` must return `(Pair accumulator result)`.\\n\\nExample:\\n```\\n(map-reduce &(fn [acc x] (Pair.init (+ @x @acc) (* @x 2))) 0 &[1 2 3])\\n; => (Pair 6 [2 4 6])\\n```\\n\""
      }
    },
    {
      "symbol": "maximum",
      "type": "(Fn [(Ref (Array a) b)] (Maybe a))",
      "info": {
        "line": 164,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"gets the maximum in an array (elements must support `<`) and wraps it in a `Just`.\\n\\nIf the array is empty, it returns `Nothing`.\\n\""
      }
    },
    {
      "symbol": "minimum",
      "type": "(Fn [(Ref (Array a) b)] (Maybe a))",
      "info": {
        "line": 178,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"gets the minimum in an array (elements must support `>`) and wraps it in a `Just`.\\n\\nIf the array is empty, returns `Nothing`\\n\""
      }
    },
    {
      "symbol": "nth",
      "type": "(Fn [(Ref (Array a) b), Int] (Maybe a))",
      "info": {
        "line": 379,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"gets a reference to the `n`th element from an array `arr` wrapped on a `Maybe`.\\n\\nIf the `index` is out of bounds, return `Maybe.Nothing`\\n\""
      }
    },
    {
      "symbol": "nth__uint8_t",
      "type": "(Fn [(Ref (Array Byte) a), Int] (Maybe Byte))",
      "info": {
        "line": 349,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "partition",
      "type": "(Fn [(Ref (Array a) b), Int] (Array (Array a)))",
      "info": {
        "line": 433,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"Partitions an array `arr` into an array of arrays of length `n`\\n    sequentially filled with the `arr`'s original values.\\n\\n    This function will fill partitions until `arr` is exhuasted.\\n\\n    If `n` is greater than or equal to the length of `arr`, the result of this\\n    function is an array containing a single array of length `n`.\\n\\n    For example:\\n\\n    ```clojure\\n    (Array.partition &[1 2 3 4] 2)\\n    => [[1 2] [3 4]]\\n    (Array.partition &[1 2 3 4] 3)\\n    => [[1 2 3] [4]]\\n    (Array.partition &[1 2 3 4] 6)\\n    => [[1 2 3 4]]\\n    ```\\n\"",
        "sig": "(Fn [(Ref (Array a) b) Int] (Array (Array a)))"
      }
    },
    {
      "symbol": "partition__uint8_t",
      "type": "(Fn [(Ref (Array Byte) a), Int] (Array (Array Byte)))",
      "info": {
        "line": 403,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "pop-back",
      "type": "(Fn [(Array a)] (Array a))",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.pop-back.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"removes the last element of an array and returns the new array.\""
      }
    },
    {
      "symbol": "pop-back!",
      "type": "(Fn [(Ref (Array a) b)] a)",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.pop-back!.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"removes an element `value` from the end of an array `a` in-place and returns it.\""
      }
    },
    {
      "symbol": "predicate-count",
      "type": "(Fn [(Ref (Array a) b), (Ref (Fn [(Ref a b)] Bool c) d)] Int)",
      "info": {
        "line": 245,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"counts the number of elements satisfying the predicate function `pred` in an array.\\n\""
      }
    },
    {
      "symbol": "prefix",
      "type": "(Fn [(Ref a b), Int] a)",
      "info": {
        "line": 202,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"gets a prefix array to `end-index`.\\n\""
      }
    },
    {
      "symbol": "prefix__Array__Char",
      "type": "(Fn [(Ref (Array Char) a), Int] (Array Char))",
      "info": {
        "line": 172,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "prn",
      "type": "(Fn [(Ref (Array a) b)] String)",
      "info": {
        "line": 356,
        "column": 19,
        "file": "/Users/oliverfencott/.carp/core/String.carp"
      },
      "meta": {
        "implements": "(prn)"
      }
    },
    {
      "symbol": "push-back",
      "type": "(Fn [(Array a), a] (Array a))",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.push-back.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"adds an element `value` to the end of an array `a`.\""
      }
    },
    {
      "symbol": "push-back!",
      "type": "(Fn [(Ref (Array a) b), a] ())",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.push-back!.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"adds an element `value` to the end of an array `a` in-place.\""
      }
    },
    {
      "symbol": "push-back__Array__uint8_t",
      "type": "(Fn [(Array (Array Byte)), (Array Byte)] (Array (Array Byte)))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.push-back__Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "push-back__Char",
      "type": "(Fn [(Array Char), Char] (Array Char))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.push-back__Char template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "push-back__uint8_t",
      "type": "(Fn [(Array Byte), Byte] (Array Byte))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.push-back__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "range",
      "type": "(Fn [a, a, a] (Result (Array a) String))",
      "info": {
        "line": 8,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/ArrayExt.carp"
      },
      "meta": {
        "doc": "\"creates an array from `start` to `end` with `step` between them\\n(the elements must support `<`, `<=`, `>=`, and `to-int`).\\n\\nIt returns a `Result.Success` if the input was right, and a `Result.Error` if\\nthe input given was wrong, containing an error message.\\n\""
      }
    },
    {
      "symbol": "range-or-default",
      "type": "(Fn [a, a, a] (Array a))",
      "info": {
        "line": 29,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/ArrayExt.carp"
      },
      "meta": {
        "doc": "\"is a version of [`range`](#range) that returns an empty\\narray on failure.\\n\""
      }
    },
    {
      "symbol": "raw",
      "type": "(Fn [(Array a)] (Ptr a))",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.raw.template"
      },
      "meta": {
        "doc": "\"returns an array `a` as a raw pointer\\8212useful for interacting with C.\""
      }
    },
    {
      "symbol": "reduce",
      "type": "(Fn [(Ref (Fn [a, (Ref b c)] a d) e), a, (Ref (Array b) c)] a)",
      "info": {
        "line": 39,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"will reduce an array `xs` into a single value using a function `f` that takes the reduction thus far and the next value. The initial reduction value is `x`.\\n\\nAs an example, consider this definition of `sum` based on `reduce`:\\n\\n```\\n(defn sum [x]\\n  (reduce &(fn [x y] (+ x @y)) 0 x))\\n```\\n\\nIt will sum the previous sum with each new value, starting at `0`.\\n\""
      }
    },
    {
      "symbol": "reduce__int_int",
      "type": "(Fn [(Ref (Fn [Int, (Ref Int a)] Int b) c), Int, (Ref (Array Int) a)] Int)",
      "info": {
        "line": 33,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "remove",
      "type": "(Fn [(Ref a b), (Array a)] (Array a))",
      "info": {
        "line": 385,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"removes all occurrences of the element `el` in the array `arr`, in place.\\n\""
      }
    },
    {
      "symbol": "remove-nth",
      "type": "(Fn [Int, (Array a)] (Array a))",
      "info": {
        "line": 390,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"removes element at index `idx` from the array `arr`.\\n\""
      }
    },
    {
      "symbol": "repeat",
      "type": "(Fn [Int, (Ref (Fn [] a b) c)] (Array a))",
      "info": {
        "line": 281,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"repeats the function `f` `n` times and stores the results in an array.\\n\""
      }
    },
    {
      "symbol": "repeat-indexed",
      "type": "(Fn [Int, (Fn [Int] a b)] (Array a))",
      "info": {
        "line": 289,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"repeats function `f` `n` times and stores the results in an array.\\n\\nThis is similar to [`repeat`](#repeat), but the function `f` will be supplied with the index of the element.\\n\""
      }
    },
    {
      "symbol": "repeat__Char",
      "type": "(Fn [Int, (Ref (Fn [] Char) StaticLifetime)] (Array Char))",
      "info": {
        "line": 251,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "replicate",
      "type": "(Fn [Int, (Ref a b)] (Array a))",
      "info": {
        "line": 295,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"repeats element `e` `n` times and stores the results in an array.\\n\""
      }
    },
    {
      "symbol": "replicate__Char",
      "type": "(Fn [Int, (Ref Char a)] (Array Char))",
      "info": {
        "line": 265,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "rest",
      "type": "(Fn [(Ref (Array a) b)] (Array a))",
      "info": {
        "line": 210,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"gets all but the first element from the array.\\n\""
      }
    },
    {
      "symbol": "reverse",
      "type": "(Fn [(Array a)] (Array a))",
      "info": {
        "line": 214,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"reverses an array.\\n\""
      }
    },
    {
      "symbol": "reverse__Char",
      "type": "(Fn [(Array Char)] (Array Char))",
      "info": {
        "line": 184,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "scan",
      "type": "(Fn [(Ref (Fn [(Ref a b), (Ref c d)] a e) f), a, (Ref (Array c) d)] (Array a))",
      "info": {
        "line": 50,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"Similar to `Array.reduce`, but instead returns an array with the starting element,\\nand then all intermediate values.\\n\\nFor example, a scan using `Int.+` over the array [1 1 1 1 1] (starting at 0) will return [0 1 2 3 4 5].\\n\""
      }
    },
    {
      "symbol": "slice",
      "type": "(Fn [(Ref (Array a) b), Int, Int] (Array a))",
      "info": {
        "line": 194,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"gets a subarray from `start-index` to `end-index`.\\n\"",
        "implements": "(slice slice)"
      }
    },
    {
      "symbol": "slice__Char",
      "type": "(Fn [(Ref (Array Char) a), Int, Int] (Array Char))",
      "info": {
        "line": 164,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "slice__uint8_t",
      "type": "(Fn [(Ref (Array Byte) a), Int, Int] (Array Byte))",
      "info": {
        "line": 164,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "sort",
      "type": "(Fn [(Array a)] (Array a))",
      "info": {
        "line": 11,
        "column": 6,
        "file": "/Users/oliverfencott/.carp/core/Sort.carp"
      },
      "meta": {
        "doc": "\"Perform an in-place heapsort of a given owned array.\\n\""
      }
    },
    {
      "symbol": "sort!",
      "type": "(Fn [(Ref (Array a) b)] ())",
      "info": {
        "line": 3,
        "column": 6,
        "file": "/Users/oliverfencott/.carp/core/Sort.carp"
      },
      "meta": {
        "doc": "\"Perform an in-place heapsort of a given array.\\n\""
      }
    },
    {
      "symbol": "sort-by",
      "type": "(Fn [(Array a), (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] (Array a))",
      "info": {
        "line": 23,
        "column": 6,
        "file": "/Users/oliverfencott/.carp/core/Sort.carp"
      },
      "meta": {
        "doc": "\"Perform an in-place heapsort of a given owned array by a comparison function.\\n\""
      }
    },
    {
      "symbol": "sort-by!",
      "type": "(Fn [(Ref (Array a) b), (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] ())",
      "info": {
        "line": 15,
        "column": 6,
        "file": "/Users/oliverfencott/.carp/core/Sort.carp"
      },
      "meta": {
        "doc": "\"Perform an in-place heapsort of a given array by a comparison function.\\n\""
      }
    },
    {
      "symbol": "sorted",
      "type": "(Fn [(Ref (Array a) b)] (Array a))",
      "info": {
        "line": 7,
        "column": 6,
        "file": "/Users/oliverfencott/.carp/core/Sort.carp"
      },
      "meta": {
        "doc": "\"Perform a heapsort in a new copy of given array.\\n\""
      }
    },
    {
      "symbol": "sorted-by",
      "type": "(Fn [(Ref (Array a) b), (Ref (Fn [(Ref a c), (Ref a c)] Bool d) e)] (Array a))",
      "info": {
        "line": 19,
        "column": 6,
        "file": "/Users/oliverfencott/.carp/core/Sort.carp"
      },
      "meta": {
        "doc": "\"Perform a heapsort in a new copy of given array by a comparison function.\\n\""
      }
    },
    {
      "symbol": "str",
      "type": "(Fn [(Ref (Array a) b)] String)",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.str.parameterizedTemplate"
      },
      "meta": {
        "doc": "\"converts an array to a string.\""
      }
    },
    {
      "symbol": "suffix",
      "type": "(Fn [(Ref (Array a) b), Int] (Array a))",
      "info": {
        "line": 206,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"gets a suffix array from `start-index`.\\n\""
      }
    },
    {
      "symbol": "suffix__Char",
      "type": "(Fn [(Ref (Array Char) a), Int] (Array Char))",
      "info": {
        "line": 176,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "sum",
      "type": "(Fn [(Ref (Array a) b)] a)",
      "info": {
        "line": 190,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"sums an array (elements must support `+` and `zero`).\\n\""
      }
    },
    {
      "symbol": "sum-length",
      "type": "(Fn [(Ref (Array (Array a)) b)] Int)",
      "info": {
        "line": 338,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"returns the sum of lengths from a nested array `xs`.\\n\""
      }
    },
    {
      "symbol": "swap",
      "type": "(Fn [(Array a), Int, Int] (Array a))",
      "info": {
        "line": 268,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"swaps the indices `i` and `j` of an array `a`.\\n\""
      }
    },
    {
      "symbol": "swap!",
      "type": "(Fn [(Ref (Array a) b), Int, Int] ())",
      "info": {
        "line": 274,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"swaps the indices `i` and `j` of an array `a` in place.\\n\""
      }
    },
    {
      "symbol": "unreduce",
      "type": "(Fn [a, (Ref (Fn [a] Bool b) c), (Ref (Fn [a] a b) d)] (Array a))",
      "info": {
        "line": 319,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"creates an array by producing values using `step` until they\\nno longer satisfy `test`. The initial value is `start`.\\n\\nExample:\\n```\\n; if we didn\\8217t have Array.range, we could define it like this:\\n(defn range [start end step]\\n  (unreduce start &(fn [x] (< x (+ step end))) &(fn [x] (+ x step)))\\n)\\n```\\n\""
      }
    },
    {
      "symbol": "unsafe-first",
      "type": "(Fn [(Ref (Array a) b)] (Ref a b))",
      "info": {
        "line": 122,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"takes the first element of an array.\\n\\nGenerates a runtime error if the array is empty.\\n\""
      }
    },
    {
      "symbol": "unsafe-first__String",
      "type": "(Fn [(Ref (Array String) a)] (Ref String a))",
      "info": {
        "line": 92,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-last",
      "type": "(Fn [(Ref (Array a) b)] (Ref a b))",
      "info": {
        "line": 136,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"takes the last element of an array.\\n\\nGenerates a runtime error if the array is empty.\\n\""
      }
    },
    {
      "symbol": "unsafe-nth",
      "type": "(Fn [(Ref (Array a) b), Int] (Ref a b))",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.unsafe-nth.template"
      },
      "meta": {
        "doc": "\"gets a reference to the `n`th element from an array `a`.\""
      }
    },
    {
      "symbol": "unsafe-nth-value",
      "type": "(Fn [(Ref (Array a) b), Int] a)",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.unsafe-nth-value.template"
      },
      "meta": {
        "doc": "\"returns the value at index `i` of an array `a` (just like [unsafe-nth](#unsafe-nth)) but does not take its reference, and does *not* copy the value. Should only be used for optimizations and when you know what you're doing, circumvents the borrow checker!\\n\""
      }
    },
    {
      "symbol": "unsafe-nth__Array__String",
      "type": "(Fn [(Ref (Array (Array String)) a), Int] (Ref (Array String) a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__Array__String template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-nth__Array__uint8_t",
      "type": "(Fn [(Ref (Array (Array Byte)) a), Int] (Ref (Array Byte) a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-nth__Char",
      "type": "(Fn [(Ref (Array Char) a), Int] (Ref Char a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__Char template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-nth__Result__Uint16_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint16 (Array Byte))) a), Int] (Ref (Result Uint16 (Array Byte)) a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__Result__Uint16_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-nth__Result__Uint32_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint32 (Array Byte))) a), Int] (Ref (Result Uint32 (Array Byte)) a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__Result__Uint32_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-nth__Result__Uint64_Array__uint8_t",
      "type": "(Fn [(Ref (Array (Result Uint64 (Array Byte))) a), Int] (Ref (Result Uint64 (Array Byte)) a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__Result__Uint64_Array__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-nth__String",
      "type": "(Fn [(Ref (Array String) a), Int] (Ref String a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__String template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-nth__Uint16",
      "type": "(Fn [(Ref (Array Uint16) a), Int] (Ref Uint16 a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__Uint16 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-nth__Uint32",
      "type": "(Fn [(Ref (Array Uint32) a), Int] (Ref Uint32 a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__Uint32 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-nth__Uint64",
      "type": "(Fn [(Ref (Array Uint64) a), Int] (Ref Uint64 a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__Uint64 template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-nth__int",
      "type": "(Fn [(Ref (Array Int) a), Int] (Ref Int a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__int template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-nth__uint8_t",
      "type": "(Fn [(Ref (Array Byte) a), Int] (Ref Byte a))",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Array.unsafe-nth__uint8_t template"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "unsafe-raw",
      "type": "(Fn [(Ref (Array a) b)] (Ptr a))",
      "info": {
        "line": 0,
        "column": 0,
        "file": "Array.unsafe-raw.template"
      },
      "meta": {
        "doc": "\"returns an array `a` as a raw pointer\\8212useful for interacting with C.\""
      }
    },
    {
      "symbol": "zero",
      "type": "(Fn [] (Array a))",
      "info": {
        "line": 346,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"returns the empty array.\\n\"",
        "implements": "(zero zero)"
      }
    },
    {
      "symbol": "zero__uint8_t",
      "type": "(Fn [] (Array Byte))",
      "info": {
        "line": 316,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "meta": {
        "hidden": "true"
      }
    },
    {
      "symbol": "zip",
      "type": "(Fn [(Ref (Fn [(Ref a b), (Ref c d)] e f) g), (Ref (Array a) b), (Ref (Array c) d)] (Array e))",
      "info": {
        "line": 330,
        "column": 4,
        "file": "/Users/oliverfencott/Desktop/projects/carp/core/Array.carp"
      },
      "meta": {
        "doc": "\"maps over two arrays using a function `f` that takes two arguments. It will produces a new array with the length of the shorter input.\\n\\nThe trailing elements of the longer array will be discarded.\\n\""
      }
    }
  ],
  "symbol": "Array"
}]