Types:

* : (Fn [a, a] a) = {
    Byte.*
    Int.*
    Long.*
    Double.*
    Float.*
    Int8.*
    Int16.*
    Int32.*
    Int64.*
    Uint8.*
    Uint16.*
    Uint32.*
    Uint64.*
}
+ : (Fn [a, a] a) = {
    Byte.+
    Int.+
    Long.+
    Double.+
    Float.+
    Int8.+
    Int16.+
    Int32.+
    Int64.+
    Uint8.+
    Uint16.+
    Uint32.+
    Uint64.+
}
- : (Fn [a, a] a) = {
    Byte.-
    Int.-
    Long.-
    Double.-
    Float.-
    Int8.-
    Int16.-
    Int32.-
    Int64.-
    Uint8.-
    Uint16.-
    Uint32.-
    Uint64.-
}
/ : (Fn [a, a] a) = {
    Byte./
    Int./
    Long./
    Double./
    Float./
    Int8./
    Int16./
    Int32./
    Int64./
    Uint8./
    Uint16./
    Uint32./
    Uint64./
}
< : (Fn [a, a] Bool) = {
    Byte.<
    ByteRef.<
    Int.<
    IntRef.<
    Long.<
    LongRef.<
    Double.<
    DoubleRef.<
    Float.<
    FloatRef.<
    PairRef.<
    Pair.<
    TripleRef.<
    Triple.<
    QuadrupleRef.<
    Quadruple.<
    Int8.<
    Int16.<
    Int32.<
    Int64.<
    Uint8.<
    Uint16.<
    Uint32.<
    Uint64.<
    Char.<
    CharRef.<
    String.<
    StringCopy.<
}
= : (Fn [a, a] Bool) = {
    Bool.=
    RefBool.=
    Pointer.eq
    Pointer.ref-eq
    Maybe.=
    Result.=
    Byte.=
    ByteRef.=
    Int.=
    IntRef.=
    Long.=
    LongRef.=
    Double.=
    DoubleRef.=
    Float.=
    FloatRef.=
    Pair.=
    Triple.=
    Quadruple.=
    Array.=
    StaticArray.=
    Int8.=
    Int8Extra.=
    Int16.=
    Int16Extra.=
    Int32.=
    Int32Extra.=
    Int64.=
    Int64Extra.=
    Uint8.=
    Uint8Extra.=
    Uint16.=
    Uint16Extra.=
    Uint32.=
    Uint32Extra.=
    Uint64.=
    Uint64Extra.=
    Char.=
    CharRef.=
    String.=
    StringCopy.=
    Pattern.=
    Map.=
    Set.=
    Unit.=
    UnitRef.=
}
> : (Fn [a, a] Bool) = {
    Byte.>
    ByteRef.>
    Int.>
    IntRef.>
    Long.>
    LongRef.>
    Double.>
    DoubleRef.>
    Float.>
    FloatRef.>
    PairRef.>
    Pair.>
    TripleRef.>
    Triple.>
    QuadrupleRef.>
    Quadruple.>
    Int8.>
    Int16.>
    Int32.>
    Int64.>
    Uint8.>
    Uint16.>
    Uint32.>
    Uint64.>
    Char.>
    CharRef.>
    String.>
    StringCopy.>
}
Bucket : Type
ByteOrder : Type
FILE : Type
Int16 : Type
Int32 : Type
Int64 : Type
Int8 : Type
Map : Type
Maybe : Type
Opaque : Type
Pair : Type
Quadruple : Type
Result : Type
Set : Type
SetBucket : Type
Triple : Type
Uint16 : Type
Uint32 : Type
Uint64 : Type
Uint8 : Type
abs : (Fn [a] a) = {
    Int.abs
    Long.abs
    Double.abs
    Float.abs
}
acos : (Fn [a] a) = {
    Double.acos
    Float.acos
}
add-ref : (Fn [(Ref a tyvar-from-info-0_7_28), (Ref a tyvar-from-info-0_7_31)] a) = {
    Byte.add-ref
    Int.add-ref
    Double.add-ref
    Float.add-ref
}
asin : (Fn [a] a) = {
    Double.asin
    Float.asin
}
atan : (Fn [a] a) = {
    Double.atan
    Float.atan
}
atan2 : (Fn [a, a] a) = {
    Double.atan2
    Float.atan2
}
bit-and : (Fn [a, a] a) = {
    Byte.bit-and
    Int.bit-and
    Long.bit-and
    Int8.bit-and
    Int16.bit-and
    Int32.bit-and
    Int64.bit-and
    Uint8.bit-and
    Uint16.bit-and
    Uint32.bit-and
    Uint64.bit-and
}
bit-not : (Fn [a] a) = {
    Byte.bit-not
    Int.bit-not
    Long.bit-not
    Int8.bit-not
    Int16.bit-not
    Int32.bit-not
    Int64.bit-not
    Uint8.bit-not
    Uint16.bit-not
    Uint32.bit-not
    Uint64.bit-not
}
bit-or : (Fn [a, a] a) = {
    Byte.bit-or
    Int.bit-or
    Long.bit-or
    Int8.bit-or
    Int16.bit-or
    Int32.bit-or
    Int64.bit-or
    Uint8.bit-or
    Uint16.bit-or
    Uint32.bit-or
    Uint64.bit-or
}
bit-shift-left : (Fn [a, a] a) = {
    Byte.bit-shift-left
    Int.bit-shift-left
    Long.bit-shift-left
    Int8.bit-shift-left
    Int16.bit-shift-left
    Int32.bit-shift-left
    Int64.bit-shift-left
    Uint8.bit-shift-left
    Uint16.bit-shift-left
    Uint32.bit-shift-left
    Uint64.bit-shift-left
}
bit-shift-right : (Fn [a, a] a) = {
    Byte.bit-shift-right
    Int.bit-shift-right
    Long.bit-shift-right
    Int8.bit-shift-right
    Int16.bit-shift-right
    Int32.bit-shift-right
    Int64.bit-shift-right
    Uint8.bit-shift-right
    Uint16.bit-shift-right
    Uint32.bit-shift-right
    Uint64.bit-shift-right
}
bit-xor : (Fn [a, a] a) = {
    Byte.bit-xor
    Int.bit-xor
    Long.bit-xor
    Int8.bit-xor
    Int16.bit-xor
    Int32.bit-xor
    Int64.bit-xor
    Uint8.bit-xor
    Uint16.bit-xor
    Uint32.bit-xor
    Uint64.bit-xor
}
blit : (Fn [a] a) = {
    Int.blit
    Long.blit
    Float.blit
    Double.blit
    Char.blit
    Bool.blit
    Byte.blit
    Int8.blit
    Int16.blit
    Int32.blit
    Int64.blit
    Uint8.blit
    Uint16.blit
    Uint32.blit
    Uint64.blit
    Pointer.blit
}
ceil : (Fn [a] a) = {
    Double.ceil
    Float.ceil
}
copy : (Fn [(Ref a q)] a) = {
    Array.copy
    Pointer.copy
    Function.Arity0.copy
    Function.Arity1.copy
    Function.Arity2.copy
    Function.Arity3.copy
    Function.Arity4.copy
    Function.Arity5.copy
    Function.Arity6.copy
    Function.Arity7.copy
    Function.Arity8.copy
    Function.Arity9.copy
    Bool.copy
    Maybe.copy
    Result.copy
    Byte.copy
    Int.copy
    Long.copy
    Double.copy
    Float.copy
    Pair.copy
    Triple.copy
    Quadruple.copy
    Int8.copy
    Int16.copy
    Int32.copy
    Int64.copy
    Uint8.copy
    Uint16.copy
    Uint32.copy
    Uint64.copy
    Char.copy
    String.copy
    Pattern.copy
    Bucket.copy
    Map.copy
    SetBucket.copy
    Set.copy
    ByteOrder.copy
    Opaque.copy
    Unit.copy
}
cos : (Fn [a] a) = {
    Double.cos
    Float.cos
}
cosh : (Fn [a] a) = {
    Double.cosh
    Float.cosh
}
dec : (Fn [a] a) = {
    Pointer.dec
    Byte.dec
    Int.dec
    Long.dec
    Double.dec
    Float.dec
}
delete : (Fn [a] ()) = {
    Array.delete
    StaticArray.delete
    Function.Arity0.delete
    Function.Arity1.delete
    Function.Arity2.delete
    Function.Arity3.delete
    Function.Arity4.delete
    Function.Arity5.delete
    Function.Arity6.delete
    Function.Arity7.delete
    Function.Arity8.delete
    Function.Arity9.delete
    Maybe.delete
    Result.delete
    Pair.delete
    Triple.delete
    Quadruple.delete
    String.delete
    Pattern.delete
    Bucket.delete
    Map.delete
    SetBucket.delete
    Set.delete
    ByteOrder.delete
    Opaque.delete
}
div-ref : (Fn [(Ref a tyvar-from-info-0_10_28), (Ref a tyvar-from-info-0_10_31)] a) = {
    
}
empty? : (Fn [(Ref a tyvar-from-info-0_71_28)] Bool) = {
    Array.empty?
    StaticArray.empty?
    String.empty?
    Map.empty?
    Set.empty?
}
exp : (Fn [a] a) = {
    Double.exp
    Float.exp
}
floor : (Fn [a] a) = {
    Double.floor
    Float.floor
}
format : (Fn [(Ref String tyvar-from-info-0_36_27), a] String) = {
    String.format
    Bool.format
    Int.format
    Byte.format
    Float.format
    Long.format
    Double.format
    Char.format
    IntRef.format
    BoolRef.format
    ByteRef.format
    LongRef.format
    FloatRef.format
    DoubleRef.format
}
frexp : (Fn [a, (Ref Int tyvar-from-info-0_54_27)] a) = {
    Double.frexp
    Float.frexp
}
from-int : (Fn [Int] a) = {
    Byte.from-int
    Int.from-int
    Long.from-int
    Double.from-int
    Float.from-int
    Char.from-int
}
from-string : (Fn [(Ref String tyvar-from-info-0_37_32)] a) = {
    Int.from-string
    Byte.from-string
    Float.from-string
    Long.from-string
    Double.from-string
}
hash : (Fn [(Ref a tyvar-from-info-0_1_25)] Int) = {
    String.hash
    Int.hash
    Long.hash
    Bool.hash
    Char.hash
    Byte.hash
    Float.hash
    Double.hash
    Int8.hash
    Int16.hash
    Int32.hash
    Int64.hash
    Uint8.hash
    Uint16.hash
    Uint32.hash
    Uint64.hash
    Pair.hash
}
inc : (Fn [a] a) = {
    Pointer.inc
    Byte.inc
    Int.inc
    Long.inc
    Double.inc
    Float.inc
}
ldexp : (Fn [a, Int] a) = {
    Double.ldexp
    Float.ldexp
}
log : (Fn [a] a) = {
    Double.log
    Float.log
}
log10 : (Fn [a] a) = {
    Double.log10
    Float.log10
}
mod : (Fn [a, a] a) = {
    Byte.mod
    Int.mod
    Long.mod
    Double.mod
    Float.mod
}
modf : (Fn [a, (Ref a tyvar-from-info-0_59_26)] a) = {
    Double.modf
    Float.modf
}
mul-ref : (Fn [(Ref a tyvar-from-info-0_9_28), (Ref a tyvar-from-info-0_9_31)] a) = {
    
}
neg : (Fn [a] a) = {
    Int.neg
    Long.neg
    Double.neg
    Float.neg
}
pi : a = {
    Double.pi
    Float.pi
}
pow : (Fn [a, a] a) = {
    Byte.pow
    Int.pow
    Double.pow
    Float.pow
}
prn : (Fn [a] String) = {
    StaticArray.str
    Function.Arity0.prn
    Function.Arity1.prn
    Function.Arity2.prn
    Function.Arity3.prn
    Function.Arity4.prn
    Function.Arity5.prn
    Function.Arity6.prn
    Function.Arity7.prn
    Function.Arity8.prn
    Function.Arity9.prn
    String.prn
    StringCopy.prn
    Char.prn
    Int.prn
    IntRef.prn
    Bool.prn
    BoolRef.prn
    Byte.prn
    ByteRef.prn
    Long.prn
    LongRef.prn
    Float.prn
    FloatRef.prn
    Double.prn
    DoubleRef.prn
    Array.prn
    Int8.prn
    Int8Extra.prn
    Int16.prn
    Int16Extra.prn
    Int32.prn
    Int32Extra.prn
    Int64.prn
    Int64Extra.prn
    Uint8.prn
    Uint8Extra.prn
    Uint16.prn
    Uint16Extra.prn
    Uint32.prn
    Uint32Extra.prn
    Uint64.prn
    Uint64Extra.prn
    Pointer.prn
    Pattern.prn
    Unit.prn
}
random : (Fn [] a) = {
    Int.random
    Float.random
    Long.random
    Double.random
    Char.random
    Byte.random
}
random-between : (Fn [a, a] a) = {
    Int.random-between
    Float.random-between
    Long.random-between
    Double.random-between
    Char.random-between
    Byte.random-between
}
sin : (Fn [a] a) = {
    Double.sin
    Float.sin
}
sinh : (Fn [a] a) = {
    Double.sinh
    Float.sinh
}
slice : (Fn [(Ref a tyvar-from-info-0_67_27), Int, Int] a) = {
    Array.slice
    String.slice
}
sqrt : (Fn [a] a) = {
    Double.sqrt
    Float.sqrt
}
str : (Fn [a] String) = {
    Array.str
    StaticArray.str
    Function.Arity0.str
    Function.Arity1.str
    Function.Arity2.str
    Function.Arity3.str
    Function.Arity4.str
    Function.Arity5.str
    Function.Arity6.str
    Function.Arity7.str
    Function.Arity8.str
    Function.Arity9.str
    Maybe.str
    Result.str
    Pair.str
    Triple.str
    Quadruple.str
    PtrChar.str
    String.str
    StringCopy.str
    Bool.str
    Int.str
    Byte.str
    Float.str
    Long.str
    Double.str
    Char.str
    IntRef.str
    BoolRef.str
    ByteRef.str
    LongRef.str
    FloatRef.str
    DoubleRef.str
    Int8.str
    Int8Extra.str
    Int16.str
    Int16Extra.str
    Int32.str
    Int32Extra.str
    Int64.str
    Int64Extra.str
    Uint8.str
    Uint8Extra.str
    Uint16.str
    Uint16Extra.str
    Uint32.str
    Uint32Extra.str
    Uint64.str
    Uint64Extra.str
    Pointer.str
    Pattern.str
    Bucket.str
    Map.str
    SetBucket.str
    Set.str
    ByteOrder.str
    Opaque.str
}
sub-ref : (Fn [(Ref a tyvar-from-info-0_8_28), (Ref a tyvar-from-info-0_8_31)] a) = {
    
}
tan : (Fn [a] a) = {
    Double.tan
    Float.tan
}
tanh : (Fn [a] a) = {
    Double.tanh
    Float.tanh
}
to-int : (Fn [a] Int) = {
    Byte.to-int
    Int.to-int
    Long.to-int
    Double.to-int
    Float.to-int
    Char.to-int
}
zero : (Fn [] a) = {
    Bool.zero
    Maybe.zero
    Byte.zero
    Int.zero
    Long.zero
    Double.zero
    Float.zero
    Pair.zero
    Triple.zero
    Quadruple.zero
    Array.zero
    Int8.zero
    Int16.zero
    Int32.zero
    Int64.zero
    Uint8.zero
    Uint16.zero
    Uint32.zero
    Uint64.zero
    Char.zero
    String.zero
    Unit.zero
}

Global environment:

*gensym-counter* : Dynamic
--> : Macro
-> : Macro
/= : (Fn [a, a] Bool)
<= : (Fn [a, a] Bool)
==> : Macro
=> : Macro
>= : (Fn [a, a] Bool)
Array : Module = {
    = : (Fn [(Ref (Array a) b), (Ref (Array a) b)] Bool)
    all? : (Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (Array a) b)] Bool)
    allocate : (Fn [Int] (Array t))
    any? : (Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (Array a) b)] Bool)
    aset : (Fn [(Array t), Int, t] (Array t))
    aset! : (Fn [(Ref (Array t) q), Int, t] ())
    aset-uninitialized! : (Fn [(Ref (Array t) q), Int, t] ())
    aupdate : (Fn [(Array a), Int, (Ref (Fn [a] a b) c)] (Array a))
    aupdate! : (Fn [(Ref (Array a) b), Int, (Ref (Fn [a] a c) d)] ())
    concat : (Fn [(Ref (Array (Array a)) b)] (Array a))
    contains? : (Fn [(Ref (Array a) b), (Ref a b)] Bool)
    copy : (Fn [(Ref (Array a) q)] (Array a))
    copy-filter : (Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (Array a) e)] (Array a))
    copy-map : (Fn [(Ref (Fn [(Ref a b)] c d) e), (Ref (Array a) b)] (Array c))
    delete : (Fn [(Array a)] ())
    element-count : (Fn [(Ref (Array a) b), (Ref a b)] Int)
    empty? : (Fn [(Ref (Array a) b)] Bool)
    endo-filter : (Fn [(Ref (Fn [(Ref a q)] Bool fq) w), (Array a)] (Array a))
    endo-map : (Fn [(Ref (Fn [a] a fq) q), (Array a)] (Array a))
    enumerated : (Fn [(Ref (Array a) b)] (Array (Pair Int a)))
    find : (Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (Array a) b)] (Maybe a))
    find-index : (Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (Array a) b)] (Maybe Int))
    first : (Fn [(Ref (Array a) b)] (Maybe a))
    from-static : (Fn [(Ref (StaticArray a) b)] (Array a))
    index-of : (Fn [(Ref (Array a) b), (Ref a b)] (Maybe Int))
    last : (Fn [(Ref (Array a) b)] (Maybe a))
    length : (Fn [(Ref (Array t) q)] Int)
    map-reduce : (Fn [(Ref (Fn [(Ref a b), (Ref c d)] (Pair a e) f) g), a, (Ref (Array c) d)] (Pair a (Array e)))
    maximum : (Fn [(Ref (Array a) b)] (Maybe a))
    minimum : (Fn [(Ref (Array a) b)] (Maybe a))
    nth : (Fn [(Ref (Array a) b), Int] (Maybe a))
    partition : (Fn [(Ref (Array a) b), Int] (Array (Array a)))
    pop-back : (Fn [(Array a)] (Array a))
    pop-back! : (Fn [(Ref (Array a) q)] a)
    predicate-count : (Fn [(Ref (Array a) b), (Ref (Fn [(Ref a b)] Bool c) d)] Int)
    prefix : (Fn [(Ref a b), Int] a)
    prn : (Fn [(Ref (Array a) b)] String)
    push-back : (Fn [(Array a), a] (Array a))
    push-back! : (Fn [(Ref (Array a) q), a] ())
    range : (Fn [a, a, a] (Result (Array a) String))
    range-or-default : (Fn [a, a, a] (Array a))
    raw : (Fn [(Array t)] (Ptr t))
    reduce : (Fn [(Ref (Fn [a, (Ref b c)] a d) e), a, (Ref (Array b) c)] a)
    remove : (Fn [(Ref a b), (Array a)] (Array a))
    remove-nth : (Fn [Int, (Array a)] (Array a))
    repeat : (Fn [Int, (Ref (Fn [] a b) c)] (Array a))
    repeat-indexed : (Fn [Int, (Fn [Int] a b)] (Array a))
    replicate : (Fn [Int, (Ref a b)] (Array a))
    rest : (Fn [(Ref (Array a) b)] (Array a))
    reverse : (Fn [(Array a)] (Array a))
    slice : (Fn [(Ref (Array a) b), Int, Int] (Array a))
    sort : (Fn [(Array a)] (Array a))
    sort! : (Fn [(Ref (Array a) b)] ())
    sort-by : (Fn [(Array a), (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] (Array a))
    sort-by! : (Fn [(Ref (Array a) b), (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] ())
    sorted : (Fn [(Ref (Array a) b)] (Array a))
    sorted-by : (Fn [(Ref (Array a) b), (Ref (Fn [(Ref a c), (Ref a c)] Bool d) e)] (Array a))
    str : (Fn [(Ref (Array a) q)] String)
    suffix : (Fn [(Ref (Array a) b), Int] (Array a))
    sum : (Fn [(Ref (Array a) b)] a)
    sum-length : (Fn [(Ref (Array (Array a)) b)] Int)
    swap : (Fn [(Array a), Int, Int] (Array a))
    swap! : (Fn [(Ref (Array a) b), Int, Int] ())
    unreduce : (Fn [a, (Ref (Fn [a] Bool b) c), (Ref (Fn [a] a b) d)] (Array a))
    unsafe-first : (Fn [(Ref (Array a) b)] (Ref a b))
    unsafe-last : (Fn [(Ref (Array a) b)] (Ref a b))
    unsafe-nth : (Fn [(Ref (Array t) q), Int] (Ref t q))
    unsafe-nth-value : (Fn [(Ref (Array a) tyvar-from-info-0_223_38), Int] a)
    unsafe-raw : (Fn [(Ref q (Array t))] (Ptr t))
    zero : (Fn [] (Array a))
    zip : (Fn [(Ref (Fn [(Ref a b), (Ref c d)] e f) g), (Ref (Array a) b), (Ref (Array c) d)] (Array e))

}
Binary : Module = {
    byte-converter : (Fn [(Ref (Fn [a, (Ref b c)] (Maybe d) e) f), a] (Fn [(Ref b c)] (Result d b) f))
    bytes->int16 : (Fn [ByteOrder, (Ref (Array Byte) a)] (Maybe Uint16))
    bytes->int16-seq : (Fn [ByteOrder, (Ref (Array Byte) a)] (Pair (Array Uint16) Int))
    bytes->int16-seq-exact : (Fn [ByteOrder, (Ref (Array Byte) a)] (Result (Array Uint16) Int))
    bytes->int32 : (Fn [ByteOrder, (Ref (Array Byte) a)] (Maybe Uint32))
    bytes->int32-seq : (Fn [ByteOrder, (Ref (Array Byte) a)] (Pair (Array Uint32) Int))
    bytes->int32-seq-exact : (Fn [ByteOrder, (Ref (Array Byte) a)] (Result (Array Uint32) Int))
    bytes->int64 : (Fn [ByteOrder, (Ref (Array Byte) a)] (Maybe Uint64))
    bytes->int64-seq : (Fn [ByteOrder, (Ref (Array Byte) a)] (Pair (Array Uint64) Int))
    bytes->int64-seq-exact : (Fn [ByteOrder, (Ref (Array Byte) a)] (Result (Array Uint64) Int))
    int16->bytes : (Fn [ByteOrder, Uint16] (Array Byte))
    int16-seq->bytes : (Fn [ByteOrder, (Ref (Array Uint16) a)] (Array (Array Byte)))
    int16-to-byte : (Fn [(Ref Uint16 tyvar-from-info-0_36_32)] Byte)
    int32->bytes : (Fn [ByteOrder, Uint32] (Array Byte))
    int32-seq->bytes : (Fn [ByteOrder, (Ref (Array Uint32) a)] (Array (Array Byte)))
    int32-to-byte : (Fn [(Ref Uint32 tyvar-from-info-0_37_32)] Byte)
    int64->bytes : (Fn [ByteOrder, Uint64] (Array Byte))
    int64-seq->bytes : (Fn [ByteOrder, (Ref (Array Uint64) a)] (Array (Array Byte)))
    int64-to-byte : (Fn [(Ref Uint64 tyvar-from-info-0_38_32)] Byte)
    interpreted : (Fn [(Ref (Array (Result a b)) c)] (Array a))
    remaining-bytes : (Fn [(Ref (Array (Result a (Array b))) c)] Int)
    system-endianness : (Fn [] ByteOrder)
    system-endianness-internal : (Fn [] Int)
    to-int16 : (Fn [Byte, Byte] Uint16)
    to-int32 : (Fn [Byte, Byte, Byte, Byte] Uint32)
    to-int64 : (Fn [Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte] Uint64)
    unsafe-bytes->int16 : (Fn [ByteOrder, (Ref (Array Byte) a)] Uint16)
    unsafe-bytes->int16-seq : (Fn [ByteOrder, (Ref (Array Byte) a)] (Array Uint16))
    unsafe-bytes->int32 : (Fn [ByteOrder, (Ref (Array Byte) a)] Uint32)
    unsafe-bytes->int32-seq : (Fn [ByteOrder, (Ref (Array Byte) a)] (Array Uint32))
    unsafe-bytes->int64 : (Fn [ByteOrder, (Ref (Array Byte) a)] Uint64)
    unsafe-bytes->int64-seq : (Fn [ByteOrder, (Ref (Array Byte) a)] (Array Uint64))
    unwrap-error : (Fn [(Ref (Result a b) c)] b)
    unwrap-success : (Fn [(Ref (Result a b) c)] a)

}
Bool : Module = {
    = : (Fn [Bool, Bool] Bool)
    and : (Fn [Bool, Bool] Bool)
    blit : (Fn [Bool] Bool)
    copy : (Fn [(Ref Bool tyvar-from-info-0_6_24)] Bool)
    format : (Fn [(Ref String tyvar-from-info-0_198_26), Bool] String)
    hash : (Fn [(Ref Bool a)] Int)
    not : (Fn [Bool] Bool)
    or : (Fn [Bool, Bool] Bool)
    prn : (Fn [Bool] String)
    str : (Fn [Bool] String)
    zero : (Fn [] Bool)

}
BoolRef : Module = {
    format : (Fn [(Ref String a), (Ref Bool b)] String)
    prn : (Fn [(Ref Bool a)] String)
    str : (Fn [(Ref Bool a)] String)

}
Bucket : Module = {
    contains? : (Fn [(Ref (Bucket a b) c), (Ref a c)] Bool)
    copy : (Fn [(Ref (Bucket a b) q)] (Bucket a b))
    delete : (Fn [(Bucket a b)] ())
    empty : (Fn [] (Bucket a b))
    entries : (Fn [(Ref (Bucket a b) q)] (Ref (Array (Pair a b)) q))
    find : (Fn [(Ref (Bucket a b) c), (Ref a c)] Int)
    get : (Fn [(Ref (Bucket a b) c), (Ref a c), (Ref b d)] b)
    get-idx : (Fn [(Ref (Bucket a b) c), Int] b)
    get-maybe : (Fn [(Ref (Bucket a b) c), (Ref a c)] (Maybe b))
    init : (Fn [(Array (Pair a b))] (Bucket a b))
    prn : (Fn [(Ref (Bucket a b) q)] String)
    push-back : (Fn [(Bucket a b), (Ref a c), (Ref b d)] (Bucket a b))
    push-back! : (Fn [(Ref (Bucket a b) c), (Ref a d), (Ref b e)] ())
    put : (Fn [(Bucket a b), (Ref a c), (Ref b d)] (Bucket a b))
    put! : (Fn [(Ref (Bucket a b) c), (Ref a c), (Ref b d)] ())
    remove : (Fn [(Ref (Array (Pair a b)) c), (Ref a c)] (Array (Pair a b)))
    set-entries : (Fn [(Bucket a b), (Array (Pair a b))] (Bucket a b))
    set-entries! : (Fn [(Ref (Bucket a b) q), (Array (Pair a b))] ())
    set-idx : (Fn [(Bucket a b), Int, (Ref b c)] (Bucket a b))
    set-idx! : (Fn [(Ref (Bucket a b) c), Int, (Ref b d)] ())
    shrink : (Fn [(Bucket a b), (Ref a c)] (Bucket a b))
    str : (Fn [(Ref (Bucket a b) q)] String)
    update-entries : (Fn [(Bucket a b), (Ref (Fn [(Array (Pair a b))] (Array (Pair a b)) fq) q)] (Bucket a b))

}
Byte : Module = {
    * : (Fn [Byte, Byte] Byte)
    + : (Fn [Byte, Byte] Byte)
    - : (Fn [Byte, Byte] Byte)
    / : (Fn [Byte, Byte] Byte)
    < : (Fn [Byte, Byte] Bool)
    = : (Fn [Byte, Byte] Bool)
    > : (Fn [Byte, Byte] Bool)
    add-ref : (Fn [(Ref Byte a), (Ref Byte b)] Byte)
    bit-and : (Fn [Byte, Byte] Byte)
    bit-not : (Fn [Byte] Byte)
    bit-or : (Fn [Byte, Byte] Byte)
    bit-shift-left : (Fn [Byte, Byte] Byte)
    bit-shift-right : (Fn [Byte, Byte] Byte)
    bit-xor : (Fn [Byte, Byte] Byte)
    blit : (Fn [Byte] Byte)
    clamp : (Fn [a, a, a] a)
    copy : (Fn [(Ref Byte tyvar-from-info-0_5_23)] Byte)
    dec : (Fn [Byte] Byte)
    even? : (Fn [Byte] Bool)
    format : (Fn [(Ref String tyvar-from-info-0_222_26), Byte] String)
    from-int : (Fn [Int] Byte)
    from-string : (Fn [(Ref String a)] (Maybe Byte))
    hash : (Fn [(Ref Byte a)] Int)
    inc : (Fn [Byte] Byte)
    mod : (Fn [Byte, Byte] Byte)
    odd? : (Fn [Byte] Bool)
    pow : (Fn [Byte, Byte] Byte)
    prn : (Fn [Byte] String)
    random : (Fn [] Byte)
    random-between : (Fn [Byte, Byte] Byte)
    str : (Fn [Byte] String)
    to-int : (Fn [Byte] Int)
    zero : (Fn [] Byte)

}
ByteOrder : Module = {
    BigEndian : (Fn [] ByteOrder)
    LittleEndian : (Fn [] ByteOrder)
    copy : (Fn [(Ref ByteOrder q)] ByteOrder)
    delete : (Fn [ByteOrder] ())
    get-tag : (Fn [(Ref ByteOrder q)] Int)
    prn : (Fn [(Ref ByteOrder q)] String)
    str : (Fn [(Ref ByteOrder q)] String)

}
ByteRef : Module = {
    < : (Fn [(Ref Byte a), (Ref Byte b)] Bool)
    = : (Fn [(Ref Byte a), (Ref Byte b)] Bool)
    > : (Fn [(Ref Byte a), (Ref Byte b)] Bool)
    format : (Fn [(Ref String a), (Ref Byte b)] String)
    prn : (Fn [(Ref Byte a)] String)
    str : (Fn [(Ref Byte a)] String)

}
Char : Module = {
    < : (Fn [Char, Char] Bool)
    = : (Fn [Char, Char] Bool)
    > : (Fn [Char, Char] Bool)
    alpha? : (Fn [Char] Bool)
    alphanum? : (Fn [Char] Bool)
    blit : (Fn [Char] Char)
    copy : (Fn [(Ref Char tyvar-from-info-0_11_24)] Char)
    format : (Fn [(Ref String tyvar-from-info-0_292_26), Char] String)
    from-byte : (Fn [Byte] Char)
    from-int : (Fn [Int] Char)
    hash : (Fn [(Ref Char a)] Int)
    lower-case? : (Fn [Char] Bool)
    meaning : (Fn [(Ref Char a)] Int)
    num? : (Fn [Char] Bool)
    prn : (Fn [Char] String)
    random : (Fn [] Char)
    random-between : (Fn [Char, Char] Char)
    str : (Fn [Char] String)
    to-byte : (Fn [Char] Byte)
    to-int : (Fn [Char] Int)
    upper-case? : (Fn [Char] Bool)
    zero : (Fn [] Char)

}
CharRef : Module = {
    < : (Fn [(Ref Char a), (Ref Char b)] Bool)
    = : (Fn [(Ref Char a), (Ref Char b)] Bool)
    > : (Fn [(Ref Char a), (Ref Char b)] Bool)

}
Control : Module = {
    iterate : (Fn [Int, (Ref (Fn [a] a) b), a] a)
    iterate-until : (Fn [(Ref (Fn [a] a) b), (Ref (Fn [a] Bool) c), a] a)
    when-error : (Fn [(Ref (Fn [] ()) a), (Result b c)] ())
    when-just : (Fn [(Ref (Fn [] ()) a), (Maybe b)] ())
    when-nothing : (Fn [(Ref (Fn [] ()) a), (Maybe b)] ())
    when-success : (Fn [(Ref (Fn [] ()) a), (Result b c)] ())

}
Debug : Module = {
    assert-balanced : Macro
    check-allocations : Dynamic
    leak-array : (Fn [a] ())
    log-memory-balance! : (Fn [Bool] ())
    memory-balance : (Fn [] Long)
    memory-logged : Macro
    reset-memory-balance! : (Fn [] ())
    sanitize-addresses : Dynamic
    trace : Macro

}
Derive : Module = {
    derivable? : Dynamic
    derivables : Dynamic
    derive : Macro
    make-deriver : Dynamic
    make-update-deriver : Dynamic

}
Double : Module = {
    * : (Fn [Double, Double] Double)
    + : (Fn [Double, Double] Double)
    - : (Fn [Double, Double] Double)
    / : (Fn [Double, Double] Double)
    < : (Fn [Double, Double] Bool)
    = : (Fn [Double, Double] Bool)
    > : (Fn [Double, Double] Bool)
    MAX : Double
    abs : (Fn [Double] Double)
    acos : (Fn [Double] Double)
    add-ref : (Fn [(Ref Double a), (Ref Double b)] Double)
    approx : (Fn [a, a] Bool)
    asin : (Fn [Double] Double)
    atan : (Fn [Double] Double)
    atan2 : (Fn [Double, Double] Double)
    blit : (Fn [Double] Double)
    ceil : (Fn [Double] Double)
    copy : (Fn [(Ref Double tyvar-from-info-0_23_23)] Double)
    cos : (Fn [Double] Double)
    cosh : (Fn [Double] Double)
    dec : (Fn [Double] Double)
    e : Double
    exp : (Fn [Double] Double)
    floor : (Fn [Double] Double)
    format : (Fn [(Ref String tyvar-from-info-0_273_26), Double] String)
    frexp : (Fn [Double, (Ref Int tyvar-from-info-0_47_31)] Double)
    from-float : (Fn [Float] Double)
    from-int : (Fn [Int] Double)
    from-long : (Fn [Long] Double)
    from-string : (Fn [(Ref String a)] (Maybe Double))
    hash : (Fn [(Ref Double a)] Int)
    inc : (Fn [Double] Double)
    ldexp : (Fn [Double, Int] Double)
    log : (Fn [Double] Double)
    log10 : (Fn [Double] Double)
    mod : (Fn [Double, Double] Double)
    modf : (Fn [Double, (Ref Double tyvar-from-info-0_52_30)] Double)
    neg : (Fn [Double] Double)
    pi : Double
    pow : (Fn [Double, Double] Double)
    prn : (Fn [Double] String)
    random : (Fn [] Double)
    random-between : (Fn [Double, Double] Double)
    sin : (Fn [Double] Double)
    sinh : (Fn [Double] Double)
    sqrt : (Fn [Double] Double)
    str : (Fn [Double] String)
    tan : (Fn [Double] Double)
    tanh : (Fn [Double] Double)
    to-bytes : (Fn [Double] Long)
    to-float : (Fn [Double] Float)
    to-int : (Fn [Double] Int)
    to-long : (Fn [Double] Long)
    zero : (Fn [] Double)

}
DoubleRef : Module = {
    < : (Fn [(Ref Double a), (Ref Double b)] Bool)
    = : (Fn [(Ref Double a), (Ref Double b)] Bool)
    > : (Fn [(Ref Double a), (Ref Double b)] Bool)
    format : (Fn [(Ref String a), (Ref Double b)] String)
    prn : (Fn [(Ref Double a)] String)
    str : (Fn [(Ref Double a)] String)

}
Dynamic : Module = {
    * : Dynamic
    + : Dynamic
    - : Dynamic
    / : Dynamic
    /= : Dynamic
    < : Dynamic
    = : Dynamic
    > : Dynamic
    List : Module = {
        find : Dynamic
        in? : Dynamic
        nth : Dynamic
        pairs : Dynamic
        set-nth : Dynamic
        update-nth : Dynamic

    }
    Map : Module = {
        = : Dynamic
        all? : Dynamic
        contains? : Dynamic
        create : Dynamic
        empty? : Dynamic
        from-array : Dynamic
        get : Dynamic
        get-with-default : Dynamic
        grow : Dynamic
        keys : Dynamic
        kv-reduce : Dynamic
        len : Dynamic
        map : Dynamic
        merge : Dynamic
        put : Dynamic
        remove : Dynamic
        resize : Dynamic
        reverse : Dynamic
        shrink : Dynamic
        str : Dynamic
        to-array : Dynamic
        update : Dynamic
        update-with-default : Dynamic
        vals : Dynamic

    }
    Pair : Module = {
        init : Dynamic

    }
    Path : Module = {
        absolute : Dynamic
        directory : Dynamic

    }
    Project : Module = {
        config : Dynamic
        get-config : Dynamic
        no-echo : Dynamic

    }
    Random : Module = {
        gen-seed-at-startup? : Macro

    }
    String : Module = {
        char-at : Dynamic
        concat : Dynamic
        empty? : Dynamic
        head : Dynamic
        index-of : Dynamic
        length : Dynamic
        prefix : Dynamic
        slice : Dynamic
        split-on : Dynamic
        suffix : Dynamic
        tail : Dynamic
        to-list : Dynamic

    }
    Symbol : Module = {
        concat : Dynamic
        from : Dynamic
        prefix : Dynamic
        str : Dynamic

    }
    all-but-last : Dynamic
    all? : Dynamic
    any? : Dynamic
    append : Dynamic
    apply : Dynamic
    array : Dynamic
    array? : Dynamic
    build : Dynamic
    c : Dynamic
    caaaar : Dynamic
    caaadr : Dynamic
    caaar : Dynamic
    caadar : Dynamic
    caaddr : Dynamic
    caadr : Dynamic
    caar : Dynamic
    cadaar : Dynamic
    cadadr : Dynamic
    cadar : Dynamic
    caddar : Dynamic
    cadddr : Dynamic
    caddr : Dynamic
    cadr : Dynamic
    car : Dynamic
    cat : Dynamic
    cdaaar : Dynamic
    cdaadr : Dynamic
    cdaar : Dynamic
    cdadar : Dynamic
    cdaddr : Dynamic
    cdadr : Dynamic
    cdar : Dynamic
    cddaar : Dynamic
    cddadr : Dynamic
    cddar : Dynamic
    cdddar : Dynamic
    cddddr : Dynamic
    cdddr : Dynamic
    cddr : Dynamic
    cdr : Dynamic
    collect-into : Dynamic
    column : Dynamic
    compose : Dynamic
    cons : Dynamic
    cons-last : Dynamic
    curry : Dynamic
    curry* : Dynamic
    cxr : Dynamic
    dec : Dynamic
    defdynamic : Dynamic
    defined? : Dynamic
    definterface : Dynamic
    defmacro : Dynamic
    defmodule : Dynamic
    defndynamic : Dynamic
    deftemplate : Dynamic
    deftuple : Macro
    deftype : Dynamic
    dynamic-type : Dynamic
    empty : Dynamic
    empty? : Dynamic
    env : Dynamic
    eval : Dynamic
    even? : Dynamic
    expand : Dynamic
    file : Dynamic
    filter : Dynamic
    flatten : Dynamic
    flip : Dynamic
    get-env : Dynamic
    hash : Dynamic
    help : Dynamic
    host-arch : Dynamic
    host-bit-width : Dynamic
    host-os : Dynamic
    imod : Dynamic
    implements : Dynamic
    inc : Dynamic
    info : Dynamic
    kind : Dynamic
    last : Dynamic
    length : Dynamic
    line : Dynamic
    list : Dynamic
    list? : Dynamic
    load : Dynamic
    load-once : Dynamic
    macro-error : Dynamic
    macro-log : Dynamic
    managed? : Dynamic
    map : Dynamic
    members : Dynamic
    meta : Dynamic
    meta-set! : Dynamic
    mod : Dynamic
    n-times : Dynamic
    neg : Dynamic
    nil : Dynamic
    nil? : Dynamic
    not : Dynamic
    nthcar : Dynamic
    nthcdr : Dynamic
    number? : Dynamic
    odd? : Dynamic
    parse : Dynamic
    postwalk : Dynamic
    prewalk : Dynamic
    project : Dynamic
    quit : Dynamic
    quote : Dynamic
    quoted : Dynamic
    read-file : Dynamic
    reduce : Dynamic
    register : Dynamic
    register-type : Dynamic
    relative-include : Dynamic
    reload : Dynamic
    reverse : Dynamic
    round : Dynamic
    run : Dynamic
    run-exe-with-args : Dynamic
    run-with-args : Dynamic
    s-expr : Dynamic
    save-docs-internal : Dynamic
    set-env : Dynamic
    str : Dynamic
    string? : Dynamic
    symbol? : Dynamic
    system-include : Dynamic
    take : Dynamic
    type : Dynamic
    unreduce : Dynamic
    use : Dynamic
    walk : Dynamic
    walk-replace : Dynamic
    write-file : Dynamic
    zip : Dynamic

}
Float : Module = {
    * : (Fn [Float, Float] Float)
    + : (Fn [Float, Float] Float)
    - : (Fn [Float, Float] Float)
    / : (Fn [Float, Float] Float)
    < : (Fn [Float, Float] Bool)
    = : (Fn [Float, Float] Bool)
    > : (Fn [Float, Float] Bool)
    MAX : Float
    abs : (Fn [Float] Float)
    acos : (Fn [Float] Float)
    add-ref : (Fn [(Ref Float a), (Ref Float b)] Float)
    approx : (Fn [a, a] Bool)
    asin : (Fn [Float] Float)
    atan : (Fn [Float] Float)
    atan2 : (Fn [Float, Float] Float)
    blit : (Fn [Float] Float)
    ceil : (Fn [Float] Float)
    clamp : (Fn [a, a, a] a)
    copy : (Fn [(Ref Float tyvar-from-info-0_46_23)] Float)
    cos : (Fn [Float] Float)
    cosh : (Fn [Float] Float)
    dec : (Fn [Float] Float)
    exp : (Fn [Float] Float)
    floor : (Fn [Float] Float)
    format : (Fn [(Ref String tyvar-from-info-0_239_26), Float] String)
    frexp : (Fn [Float, (Ref Int tyvar-from-info-0_58_30)] Float)
    from-int : (Fn [Int] Float)
    from-string : (Fn [(Ref String a)] (Maybe Float))
    hash : (Fn [(Ref Float a)] Int)
    inc : (Fn [Float] Float)
    ldexp : (Fn [Float, Int] Float)
    log : (Fn [Float] Float)
    log10 : (Fn [Float] Float)
    mod : (Fn [Float, Float] Float)
    modf : (Fn [Float, (Ref Float tyvar-from-info-0_63_29)] Float)
    neg : (Fn [Float] Float)
    pi : Float
    pow : (Fn [Float, Float] Float)
    prn : (Fn [Float] String)
    random : (Fn [] Float)
    random-between : (Fn [Float, Float] Float)
    sin : (Fn [Float] Float)
    sinh : (Fn [Float] Float)
    sqrt : (Fn [Float] Float)
    str : (Fn [Float] String)
    tan : (Fn [Float] Float)
    tanh : (Fn [Float] Float)
    to-bytes : (Fn [Float] Int)
    to-int : (Fn [Float] Int)
    zero : (Fn [] Float)

}
FloatRef : Module = {
    < : (Fn [(Ref Float a), (Ref Float b)] Bool)
    = : (Fn [(Ref Float a), (Ref Float b)] Bool)
    > : (Fn [(Ref Float a), (Ref Float b)] Bool)
    format : (Fn [(Ref String a), (Ref Float b)] String)
    prn : (Fn [(Ref Float a)] String)
    str : (Fn [(Ref Float a)] String)

}
Function : Module = {
    Arity0 : Module = {
        copy : (Fn [(Ref (Fn [] z) q)] a)
        delete : (Fn [(Fn [] z)] ())
        prn : (Fn [(Ref (Fn [] z) q)] String)
        str : (Fn [(Ref (Fn [] z) q)] String)

    }
    Arity1 : Module = {
        copy : (Fn [(Ref (Fn [d] z) q)] a)
        delete : (Fn [(Fn [d] z)] ())
        prn : (Fn [(Ref (Fn [d] z) q)] String)
        str : (Fn [(Ref (Fn [d] z) q)] String)

    }
    Arity2 : Module = {
        copy : (Fn [(Ref (Fn [d, e] z) q)] a)
        delete : (Fn [(Fn [d, e] z)] ())
        prn : (Fn [(Ref (Fn [d, e] z) q)] String)
        str : (Fn [(Ref (Fn [d, e] z) q)] String)

    }
    Arity3 : Module = {
        copy : (Fn [(Ref (Fn [d, e, f] z) q)] a)
        delete : (Fn [(Fn [d, e, f] z)] ())
        prn : (Fn [(Ref (Fn [d, e, f] z) q)] String)
        str : (Fn [(Ref (Fn [d, e, f] z) q)] String)

    }
    Arity4 : Module = {
        copy : (Fn [(Ref (Fn [d, e, f, g] z) q)] a)
        delete : (Fn [(Fn [d, e, f, g] z)] ())
        prn : (Fn [(Ref (Fn [d, e, f, g] z) q)] String)
        str : (Fn [(Ref (Fn [d, e, f, g] z) q)] String)

    }
    Arity5 : Module = {
        copy : (Fn [(Ref (Fn [d, e, f, g, h] z) q)] a)
        delete : (Fn [(Fn [d, e, f, g, h] z)] ())
        prn : (Fn [(Ref (Fn [d, e, f, g, h] z) q)] String)
        str : (Fn [(Ref (Fn [d, e, f, g, h] z) q)] String)

    }
    Arity6 : Module = {
        copy : (Fn [(Ref (Fn [d, e, f, g, h, i] z) q)] a)
        delete : (Fn [(Fn [d, e, f, g, h, i] z)] ())
        prn : (Fn [(Ref (Fn [d, e, f, g, h, i] z) q)] String)
        str : (Fn [(Ref (Fn [d, e, f, g, h, i] z) q)] String)

    }
    Arity7 : Module = {
        copy : (Fn [(Ref (Fn [d, e, f, g, h, i, j] z) q)] a)
        delete : (Fn [(Fn [d, e, f, g, h, i, j] z)] ())
        prn : (Fn [(Ref (Fn [d, e, f, g, h, i, j] z) q)] String)
        str : (Fn [(Ref (Fn [d, e, f, g, h, i, j] z) q)] String)

    }
    Arity8 : Module = {
        copy : (Fn [(Ref (Fn [d, e, f, g, h, i, j, k] z) q)] a)
        delete : (Fn [(Fn [d, e, f, g, h, i, j, k] z)] ())
        prn : (Fn [(Ref (Fn [d, e, f, g, h, i, j, k] z) q)] String)
        str : (Fn [(Ref (Fn [d, e, f, g, h, i, j, k] z) q)] String)

    }
    Arity9 : Module = {
        copy : (Fn [(Ref (Fn [d, e, f, g, h, i, j, k, l] z) q)] a)
        delete : (Fn [(Fn [d, e, f, g, h, i, j, k, l] z)] ())
        prn : (Fn [(Ref (Fn [d, e, f, g, h, i, j, k, l] z) q)] String)
        str : (Fn [(Ref (Fn [d, e, f, g, h, i, j, k, l] z) q)] String)

    }
    unsafe-env-ptr : (Fn [(Ref a tyvar-from-info-0_16_36)] (Ptr ()))
    unsafe-ptr : (Fn [(Ref a tyvar-from-info-0_8_32)] (Ptr ()))

}
Generics : Module = {
    approx : (Fn [a, a] Bool)
    approx-margin : (Fn [a, a, a] Bool)
    five : (Fn [] a)
    four : (Fn [] a)
    half : (Fn [] a)
    half-pi : (Fn [] a)
    halved : (Fn [a] a)
    hundred : (Fn [] a)
    hundred-thousand : (Fn [] a)
    inverse : (Fn [a] a)
    million : (Fn [] a)
    minus-four : (Fn [] a)
    minus-one : (Fn [] a)
    minus-two : (Fn [] a)
    ninety : (Fn [] a)
    one : (Fn [] a)
    one-hundred-eighty : (Fn [] a)
    small : (Fn [] a)
    squared : (Fn [a] a)
    tau : (Fn [] a)
    ten : (Fn [] a)
    thousand : (Fn [] a)
    three : (Fn [] a)
    twice : (Fn [a] a)
    two : (Fn [] a)

}
Heap : Module = {
    heapify! : (Fn [(Ref (Array a) b), (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] ())
    max-of-three-until! : (Fn [(Ref (Array a) b), Int, Int, (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] Int)
    peek : (Fn [(Ref (Array a) b)] (Maybe a))
    pop! : (Fn [(Ref (Array a) b), (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] a)
    push! : (Fn [(Ref (Array a) b), a, (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] ())
    push-down! : (Fn [(Ref (Array a) b), Int, (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] ())
    push-down-until! : (Fn [(Ref (Array a) b), Int, Int, (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] ())
    push-up! : (Fn [(Ref (Array a) b), Int, (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] ())

}
HeapSort : Module = {
    sort : (Fn [(Array a)] (Array a))
    sort! : (Fn [(Ref (Array a) b)] ())
    sort-by : (Fn [(Array a), (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] (Array a))
    sort-by! : (Fn [(Ref (Array a) b), (Ref (Fn [(Ref a b), (Ref a b)] Bool c) d)] ())
    sorted : (Fn [(Ref (Array a) b)] (Array a))
    sorted-by : (Fn [(Ref (Array a) b), (Ref (Fn [(Ref a c), (Ref a c)] Bool d) e)] (Array a))

}
IO : Module = {
    EOF : Char
    SEEK-CUR : Int
    SEEK-END : Int
    SEEK-SET : Int
    error : (Fn [(Ref String tyvar-from-info-0_16_24)] ())
    errorln : (Fn [(Ref String tyvar-from-info-0_14_26)] ())
    exit : (Fn [Int] ())
    fclose : (Fn [(Ptr FILE)] ())
    fflush : (Fn [(Ptr FILE)] ())
    fgetc : (Fn [(Ptr FILE)] Char)
    fopen : (Fn [(Ref String tyvar-from-info-0_28_25), (Ref String tyvar-from-info-0_28_33)] (Ptr FILE))
    fread : (Fn [a, Int, Int, (Ptr FILE)] Int)
    fseek : (Fn [(Ptr FILE), Int, Int] ())
    ftell : (Fn [(Ptr FILE)] Int)
    fwrite : (Fn [a, Int, Int, (Ptr FILE)] ())
    get-char : (Fn [] Char)
    get-line : (Fn [] String)
    getenv : (Fn [String] (Maybe String))
    open-file : (Fn [(Ref String a), (Ref String b)] (Result (Ptr FILE) Int))
    print : (Fn [(Ref String tyvar-from-info-0_12_24)] ())
    println : (Fn [(Ref String tyvar-from-info-0_10_26)] ())
    read->EOF : (Fn [(Ref String a)] (Result String Int))
    read-file : (Fn [(Ref String tyvar-from-info-0_22_29)] String)
    rewind : (Fn [(Ptr FILE)] ())
    stderr : (Ptr FILE)
    stdin : (Ptr FILE)
    stdout : (Ptr FILE)
    unlink : (Fn [String] ())

}
Int : Module = {
    * : (Fn [Int, Int] Int)
    + : (Fn [Int, Int] Int)
    - : (Fn [Int, Int] Int)
    / : (Fn [Int, Int] Int)
    < : (Fn [Int, Int] Bool)
    = : (Fn [Int, Int] Bool)
    > : (Fn [Int, Int] Bool)
    MAX : Int
    MIN : Int
    abs : (Fn [Int] Int)
    add-ref : (Fn [(Ref Int a), (Ref Int b)] Int)
    bit-and : (Fn [Int, Int] Int)
    bit-not : (Fn [Int] Int)
    bit-or : (Fn [Int, Int] Int)
    bit-shift-left : (Fn [Int, Int] Int)
    bit-shift-right : (Fn [Int, Int] Int)
    bit-xor : (Fn [Int, Int] Int)
    blit : (Fn [Int] Int)
    clamp : (Fn [a, a, a] a)
    copy : (Fn [(Ref Int tyvar-from-info-0_11_23)] Int)
    dec : (Fn [Int] Int)
    even? : (Fn [Int] Bool)
    format : (Fn [(Ref String tyvar-from-info-0_205_26), Int] String)
    from-int : (Fn [Int] Int)
    from-string : (Fn [(Ref String a)] (Maybe Int))
    hash : (Fn [(Ref Int a)] Int)
    inc : (Fn [Int] Int)
    mod : (Fn [Int, Int] Int)
    neg : (Fn [Int] Int)
    odd? : (Fn [Int] Bool)
    positive-mod : (Fn [Int, Int] Int)
    pow : (Fn [Int, Int] Int)
    prn : (Fn [Int] String)
    random : (Fn [] Int)
    random-between : (Fn [Int, Int] Int)
    str : (Fn [Int] String)
    to-int : (Fn [Int] Int)
    zero : (Fn [] Int)

}
Int16 : Module = {
    * : (Fn [Int16, Int16] Int16)
    + : (Fn [Int16, Int16] Int16)
    - : (Fn [Int16, Int16] Int16)
    / : (Fn [Int16, Int16] Int16)
    < : (Fn [Int16, Int16] Bool)
    = : (Fn [Int16, Int16] Bool)
    > : (Fn [Int16, Int16] Bool)
    bit-and : (Fn [Int16, Int16] Int16)
    bit-not : (Fn [Int16] Int16)
    bit-or : (Fn [Int16, Int16] Int16)
    bit-shift-left : (Fn [Int16, Int16] Int16)
    bit-shift-right : (Fn [Int16, Int16] Int16)
    bit-xor : (Fn [Int16, Int16] Int16)
    blit : (Fn [Int16] Int16)
    copy : (Fn [(Ref Int16 tyvar-from-info-0_72_24)] Int16)
    from-bytes : (Fn [(Ref (Array Byte) tyvar-from-info-0_76_30)] (Array Int16))
    from-long : (Fn [Long] Int16)
    hash : (Fn [(Ref Int16 a)] Int)
    prn : (Fn [Int16] String)
    str : (Fn [Int16] String)
    to-long : (Fn [Int16] Long)
    zero : (Fn [] Int16)

}
Int16Extra : Module = {
    = : (Fn [(Ref Int16 a), (Ref Int16 b)] Bool)
    prn : (Fn [(Ref Int16 a)] String)
    str : (Fn [(Ref Int16 a)] String)

}
Int32 : Module = {
    * : (Fn [Int32, Int32] Int32)
    + : (Fn [Int32, Int32] Int32)
    - : (Fn [Int32, Int32] Int32)
    / : (Fn [Int32, Int32] Int32)
    < : (Fn [Int32, Int32] Bool)
    = : (Fn [Int32, Int32] Bool)
    > : (Fn [Int32, Int32] Bool)
    bit-and : (Fn [Int32, Int32] Int32)
    bit-not : (Fn [Int32] Int32)
    bit-or : (Fn [Int32, Int32] Int32)
    bit-shift-left : (Fn [Int32, Int32] Int32)
    bit-shift-right : (Fn [Int32, Int32] Int32)
    bit-xor : (Fn [Int32, Int32] Int32)
    blit : (Fn [Int32] Int32)
    copy : (Fn [(Ref Int32 tyvar-from-info-0_116_24)] Int32)
    from-bytes : (Fn [(Ref (Array Byte) tyvar-from-info-0_120_30)] (Array Int32))
    from-long : (Fn [Long] Int32)
    hash : (Fn [(Ref Int32 a)] Int)
    prn : (Fn [Int32] String)
    str : (Fn [Int32] String)
    to-long : (Fn [Int32] Long)
    zero : (Fn [] Int32)

}
Int32Extra : Module = {
    = : (Fn [(Ref Int32 a), (Ref Int32 b)] Bool)
    prn : (Fn [(Ref Int32 a)] String)
    str : (Fn [(Ref Int32 a)] String)

}
Int64 : Module = {
    * : (Fn [Int64, Int64] Int64)
    + : (Fn [Int64, Int64] Int64)
    - : (Fn [Int64, Int64] Int64)
    / : (Fn [Int64, Int64] Int64)
    < : (Fn [Int64, Int64] Bool)
    = : (Fn [Int64, Int64] Bool)
    > : (Fn [Int64, Int64] Bool)
    bit-and : (Fn [Int64, Int64] Int64)
    bit-not : (Fn [Int64] Int64)
    bit-or : (Fn [Int64, Int64] Int64)
    bit-shift-left : (Fn [Int64, Int64] Int64)
    bit-shift-right : (Fn [Int64, Int64] Int64)
    bit-xor : (Fn [Int64, Int64] Int64)
    blit : (Fn [Int64] Int64)
    copy : (Fn [(Ref Int64 tyvar-from-info-0_160_24)] Int64)
    from-bytes : (Fn [(Ref (Array Byte) tyvar-from-info-0_164_30)] (Array Int64))
    from-long : (Fn [Long] Int64)
    hash : (Fn [(Ref Int64 a)] Int)
    prn : (Fn [Int64] String)
    str : (Fn [Int64] String)
    to-long : (Fn [Int64] Long)
    zero : (Fn [] Int64)

}
Int64Extra : Module = {
    = : (Fn [(Ref Int64 a), (Ref Int64 b)] Bool)
    prn : (Fn [(Ref Int64 a)] String)
    str : (Fn [(Ref Int64 a)] String)

}
Int8 : Module = {
    * : (Fn [Int8, Int8] Int8)
    + : (Fn [Int8, Int8] Int8)
    - : (Fn [Int8, Int8] Int8)
    / : (Fn [Int8, Int8] Int8)
    < : (Fn [Int8, Int8] Bool)
    = : (Fn [Int8, Int8] Bool)
    > : (Fn [Int8, Int8] Bool)
    bit-and : (Fn [Int8, Int8] Int8)
    bit-not : (Fn [Int8] Int8)
    bit-or : (Fn [Int8, Int8] Int8)
    bit-shift-left : (Fn [Int8, Int8] Int8)
    bit-shift-right : (Fn [Int8, Int8] Int8)
    bit-xor : (Fn [Int8, Int8] Int8)
    blit : (Fn [Int8] Int8)
    copy : (Fn [(Ref Int8 tyvar-from-info-0_28_24)] Int8)
    from-bytes : (Fn [(Ref (Array Byte) tyvar-from-info-0_32_30)] (Array Int8))
    from-long : (Fn [Long] Int8)
    hash : (Fn [(Ref Int8 a)] Int)
    prn : (Fn [Int8] String)
    str : (Fn [Int8] String)
    to-long : (Fn [Int8] Long)
    zero : (Fn [] Int8)

}
Int8Extra : Module = {
    = : (Fn [(Ref Int8 a), (Ref Int8 b)] Bool)
    prn : (Fn [(Ref Int8 a)] String)
    str : (Fn [(Ref Int8 a)] String)

}
IntRef : Module = {
    < : (Fn [(Ref Int a), (Ref Int b)] Bool)
    = : (Fn [(Ref Int a), (Ref Int b)] Bool)
    > : (Fn [(Ref Int a), (Ref Int b)] Bool)
    format : (Fn [(Ref String a), (Ref Int b)] String)
    prn : (Fn [(Ref Int a)] String)
    str : (Fn [(Ref Int a)] String)

}
Introspect : Module = {
    arguments : Dynamic
    arity : Dynamic
    command? : Dynamic
    dynamic? : Dynamic
    external? : Dynamic
    function? : Dynamic
    implements? : Macro
    interface? : Dynamic
    macro? : Dynamic
    module? : Dynamic
    primitive? : Dynamic
    struct? : Dynamic
    sumtype? : Dynamic
    type? : Dynamic
    variable? : Dynamic
    with-copy : Macro

}
Long : Module = {
    * : (Fn [Long, Long] Long)
    + : (Fn [Long, Long] Long)
    - : (Fn [Long, Long] Long)
    / : (Fn [Long, Long] Long)
    < : (Fn [Long, Long] Bool)
    = : (Fn [Long, Long] Bool)
    > : (Fn [Long, Long] Bool)
    MAX : Long
    MIN : Long
    abs : (Fn [Long] Long)
    bit-and : (Fn [Long, Long] Long)
    bit-not : (Fn [Long] Long)
    bit-or : (Fn [Long, Long] Long)
    bit-shift-left : (Fn [Long, Long] Long)
    bit-shift-right : (Fn [Long, Long] Long)
    bit-xor : (Fn [Long, Long] Long)
    blit : (Fn [Long] Long)
    copy : (Fn [(Ref Long tyvar-from-info-0_28_23)] Long)
    dec : (Fn [Long] Long)
    even? : (Fn [Long] Bool)
    format : (Fn [(Ref String tyvar-from-info-0_256_26), Long] String)
    from-int : (Fn [Int] Long)
    from-string : (Fn [(Ref String a)] (Maybe Long))
    hash : (Fn [(Ref Long a)] Int)
    inc : (Fn [Long] Long)
    mod : (Fn [Long, Long] Long)
    neg : (Fn [Long] Long)
    odd? : (Fn [Long] Bool)
    prn : (Fn [Long] String)
    random : (Fn [] Long)
    random-between : (Fn [Long, Long] Long)
    safe-add : (Fn [Long, Long, (Ref Long tyvar-from-info-0_52_38)] Bool)
    safe-mul : (Fn [Long, Long, (Ref Long tyvar-from-info-0_54_38)] Bool)
    safe-sub : (Fn [Long, Long, (Ref Long tyvar-from-info-0_53_38)] Bool)
    seed : (Fn [Long] ())
    str : (Fn [Long] String)
    to-int : (Fn [Long] Int)
    zero : (Fn [] Long)

}
LongRef : Module = {
    < : (Fn [(Ref Long a), (Ref Long b)] Bool)
    = : (Fn [(Ref Long a), (Ref Long b)] Bool)
    > : (Fn [(Ref Long a), (Ref Long b)] Bool)
    format : (Fn [(Ref String a), (Ref Long b)] String)
    prn : (Fn [(Ref Long a)] String)
    str : (Fn [(Ref Long a)] String)

}
Map : Module = {
    = : (Fn [(Ref (Map a b) c), (Ref (Map a b) c)] Bool)
    all? : (Fn [(Ref (Fn [(Ref a b), (Ref c b)] Bool d) e), (Ref (Map a c) b)] Bool)
    buckets : (Fn [(Ref (Map a b) q)] (Ref (Array (Bucket a b)) q))
    contains? : (Fn [(Ref (Map a b) c), (Ref a c)] Bool)
    copy : (Fn [(Ref (Map a b) q)] (Map a b))
    create : (Fn [] (Map a b))
    delete : (Fn [(Map a b)] ())
    empty? : (Fn [(Ref (Map a b) c)] Bool)
    endo-map : (Fn [(Ref (Fn [(Ref a b), (Ref c b)] c d) e), (Map a c)] (Map a c))
    for-each : (Fn [(Ref (Map a b) c), (Ref (Fn [(Ref a c), (Ref b c)] () d) e)] ())
    from-array : (Fn [(Array (Pair a b))] (Map a b))
    get : (Fn [(Ref (Map a b) c), (Ref a c)] b)
    get-maybe : (Fn [(Ref (Map a b) c), (Ref a c)] (Maybe b))
    get-with-default : (Fn [(Ref (Map a b) c), (Ref a c), (Ref b d)] b)
    grow : (Fn [(Map a b)] (Map a b))
    init : (Fn [Int, Int, (Array (Bucket a b))] (Map a b))
    keys : (Fn [(Ref (Map a b) c)] (Array a))
    kv-reduce : (Fn [(Ref (Fn [a, (Ref b c), (Ref d c)] a e) f), a, (Ref (Map b d) c)] a)
    len : (Fn [(Ref (Map a b) q)] (Ref Int q))
    length : (Fn [(Ref (Map a b) c)] Int)
    max-load : Int
    merge : (Fn [(Map a b), (Ref (Map a b) c)] (Map a b))
    min-load : Int
    n-buckets : (Fn [(Ref (Map a b) q)] (Ref Int q))
    prn : (Fn [(Ref (Map a b) q)] String)
    put : (Fn [(Map a b), (Ref a c), (Ref b c)] (Map a b))
    put! : (Fn [(Ref (Map a b) c), (Ref a c), (Ref b d)] ())
    remove : (Fn [(Map a b), (Ref a c)] (Map a b))
    resize : (Fn [(Map a b), Int] (Map a b))
    reverse : (Fn [(Ref (Map a b) c)] (Map b a))
    set-buckets : (Fn [(Map a b), (Array (Bucket a b))] (Map a b))
    set-buckets! : (Fn [(Ref (Map a b) q), (Array (Bucket a b))] ())
    set-len : (Fn [(Map a b), Int] (Map a b))
    set-len! : (Fn [(Ref (Map a b) q), Int] ())
    set-n-buckets : (Fn [(Map a b), Int] (Map a b))
    set-n-buckets! : (Fn [(Ref (Map a b) q), Int] ())
    shrink : (Fn [(Map a b)] (Map a b))
    str : (Fn [(Ref (Map a b) c)] String)
    to-array : (Fn [(Ref (Map a b) c)] (Array (Pair a b)))
    update : (Fn [(Map a b), (Ref a c), (Ref (Fn [b] b d) c)] (Map a b))
    update-buckets : (Fn [(Map a b), (Ref (Fn [(Array (Bucket a b))] (Array (Bucket a b)) fq) q)] (Map a b))
    update-len : (Fn [(Map a b), (Ref (Fn [Int] Int fq) q)] (Map a b))
    update-n-buckets : (Fn [(Map a b), (Ref (Fn [Int] Int fq) q)] (Map a b))
    update-with-default : (Fn [(Map a b), (Ref a c), (Ref (Fn [b] b d) c), b] (Map a b))
    vals : (Fn [(Ref (Map a b) c)] (Array b))

}
MaxHeap : Module = {
    heapify! : (Fn [(Ref (Array a) b)] ())
    peek : (Fn [(Ref (Array a) b)] (Maybe a))
    pop! : (Fn [(Ref (Array a) b)] a)
    push! : (Fn [(Ref (Array a) b), a] ())
    push-down! : (Fn [(Ref (Array a) b), Int] ())
    push-down-until! : (Fn [(Ref (Array a) b), Int, Int] ())
    push-up! : (Fn [(Ref (Array a) b), Int] ())

}
Maybe : Module = {
    = : (Fn [(Ref (Maybe a) b), (Ref (Maybe a) b)] Bool)
    Just : (Fn [a] (Maybe a))
    Nothing : (Fn [] (Maybe a))
    apply : (Fn [(Maybe a), (Ref (Fn [a] b c) d)] (Maybe b))
    copy : (Fn [(Ref (Maybe a) q)] (Maybe a))
    delete : (Fn [(Maybe a)] ())
    from : (Fn [(Maybe a), a] a)
    from-ptr : (Fn [(Ptr a)] (Maybe a))
    get-tag : (Fn [(Ref (Maybe a) q)] Int)
    just? : (Fn [(Ref (Maybe a) b)] Bool)
    nothing? : (Fn [(Ref (Maybe a) b)] Bool)
    or-zero : (Fn [(Maybe a)] a)
    prn : (Fn [(Ref (Maybe a) q)] String)
    str : (Fn [(Ref (Maybe a) q)] String)
    to-result : (Fn [(Maybe a), b] (Result a b))
    unsafe-from : (Fn [(Maybe a)] a)
    unsafe-ptr : (Fn [(Ref (Maybe a) b)] (Ptr a))
    zero : (Fn [] (Maybe a))
    zip : Macro
    zip- : Dynamic

}
MinHeap : Module = {
    heapify! : (Fn [(Ref (Array a) b)] ())
    peek : (Fn [(Ref (Array a) b)] (Maybe a))
    pop! : (Fn [(Ref (Array a) b)] a)
    push! : (Fn [(Ref (Array a) b), a] ())
    push-down! : (Fn [(Ref (Array a) b), Int] ())
    push-down-until! : (Fn [(Ref (Array a) b), Int, Int] ())
    push-up! : (Fn [(Ref (Array a) b), Int] ())

}
NULL : (Ptr a)
Opaque : Module = {
    copy : (Fn [(Ref Opaque q)] Opaque)
    delete : (Fn [Opaque] ())
    get-tag : (Fn [(Ref Opaque q)] Int)
    prn : (Fn [(Ref Opaque q)] String)
    str : (Fn [(Ref Opaque q)] String)

}
Pair : Module = {
    < : (Fn [(Pair a b), (Pair a b)] Bool)
    = : (Fn [(Ref (Pair a b) c), (Ref (Pair a b) c)] Bool)
    > : (Fn [(Pair a b), (Pair a b)] Bool)
    a : (Fn [(Ref (Pair a b) q)] (Ref a q))
    b : (Fn [(Ref (Pair a b) q)] (Ref b q))
    copy : (Fn [(Ref (Pair a b) q)] (Pair a b))
    delete : (Fn [(Pair a b)] ())
    hash : (Fn [(Ref (Pair a b) c)] Int)
    init : (Fn [a, b] (Pair a b))
    init-from-refs : (Fn [(Ref a b), (Ref c d)] (Pair a c))
    prn : (Fn [(Ref (Pair a b) q)] String)
    reverse : (Fn [(Ref (Pair a b) c)] (Pair b a))
    set-a : (Fn [(Pair a b), a] (Pair a b))
    set-a! : (Fn [(Ref (Pair a b) q), a] ())
    set-b : (Fn [(Pair a b), b] (Pair a b))
    set-b! : (Fn [(Ref (Pair a b) q), b] ())
    str : (Fn [(Ref (Pair a b) q)] String)
    update-a : (Fn [(Pair a b), (Ref (Fn [a] a fq) q)] (Pair a b))
    update-b : (Fn [(Pair a b), (Ref (Fn [b] b fq) q)] (Pair a b))
    zero : (Fn [] (Pair a b))

}
PairRef : Module = {
    < : (Fn [(Ref (Pair a b) c), (Ref (Pair a b) c)] Bool)
    > : (Fn [(Ref (Pair a b) c), (Ref (Pair a b) c)] Bool)

}
Pattern : Module = {
    = : (Fn [(Ref Pattern tyvar-from-info-0_43_24), (Ref Pattern tyvar-from-info-0_43_33)] Bool)
    copy : (Fn [(Ref Pattern tyvar-from-info-0_47_30)] Pattern)
    delete : (Fn [Pattern] ())
    find : (Fn [(Ref Pattern tyvar-from-info-0_7_24), (Ref String tyvar-from-info-0_7_33)] Int)
    find-all : (Fn [(Ref Pattern tyvar-from-info-0_11_28), (Ref String tyvar-from-info-0_11_37)] (Array Int))
    from-chars : (Fn [(Ref (Array Char) a)] Pattern)
    global-match : (Fn [(Ref Pattern tyvar-from-info-0_25_32), (Ref String tyvar-from-info-0_25_41)] (Array (Array String)))
    global-match-str : (Fn [(Ref Pattern a), (Ref String b)] (Array String))
    init : (Fn [(Ref String tyvar-from-info-0_42_24)] Pattern)
    match-groups : (Fn [(Ref Pattern tyvar-from-info-0_16_32), (Ref String tyvar-from-info-0_16_41)] (Array String))
    match-str : (Fn [(Ref Pattern tyvar-from-info-0_20_29), (Ref String tyvar-from-info-0_20_38)] String)
    matches? : (Fn [(Ref Pattern a), (Ref String b)] Bool)
    prn : (Fn [(Ref Pattern tyvar-from-info-0_39_23)] String)
    split : (Fn [(Ref Pattern a), (Ref String b)] (Array String))
    str : (Fn [(Ref Pattern tyvar-from-info-0_37_23)] String)
    substitute : (Fn [(Ref Pattern tyvar-from-info-0_33_30), (Ref String tyvar-from-info-0_33_39), (Ref String tyvar-from-info-0_33_47), Int] String)

}
Pointer : Module = {
    add : (Fn [(Ptr p), Long] (Ptr p))
    address : (Fn [(Ref a tyvar-from-info-0_10_29)] (Ptr a))
    blit : (Fn [(Ptr a)] (Ptr a))
    copy : (Fn [(Ref (Ptr p) q)] (Ptr p))
    dec : (Fn [(Ptr a)] (Ptr a))
    eq : (Fn [(Ptr p), (Ptr p)] Bool)
    free : (Fn [(Ptr p)] ())
    from-long : (Fn [Long] (Ptr p))
    inc : (Fn [(Ptr a)] (Ptr a))
    prn : (Fn [(Ptr a)] String)
    ref-eq : (Fn [(Ref (Ptr p) tyvar-from-info-0_6_28), (Ref (Ptr p) tyvar-from-info-0_6_42)] Bool)
    set : (Fn [(Ptr p), p] ())
    str : (Fn [(Ptr a)] String)
    strp : (Fn [(Ptr a)] String)
    sub : (Fn [(Ptr p), Long] (Ptr p))
    to-long : (Fn [(Ptr p)] Long)
    to-ref : (Fn [(Ptr p)] (Ref p tyvar-from-info-0_15_37))
    to-value : (Fn [(Ptr p)] p)
    unsafe-alloc : (Fn [a] (Ptr a))
    unsafe-set : (Fn [(Ptr p), a] ())
    width : (Fn [(Ptr p)] Long)

}
PtrChar : Module = {
    str : (Fn [(Ptr Char)] String)

}
Quadruple : Module = {
    < : (Fn [(Quadruple a b c d), (Quadruple a b c d)] Bool)
    = : (Fn [(Ref (Quadruple a b c d) e), (Ref (Quadruple a b c d) e)] Bool)
    > : (Fn [(Quadruple a b c d), (Quadruple a b c d)] Bool)
    a : (Fn [(Ref (Quadruple a b c d) q)] (Ref a q))
    b : (Fn [(Ref (Quadruple a b c d) q)] (Ref b q))
    c : (Fn [(Ref (Quadruple a b c d) q)] (Ref c q))
    copy : (Fn [(Ref (Quadruple a b c d) q)] (Quadruple a b c d))
    d : (Fn [(Ref (Quadruple a b c d) q)] (Ref d q))
    delete : (Fn [(Quadruple a b c d)] ())
    init : (Fn [a, b, c, d] (Quadruple a b c d))
    init-from-refs : (Fn [(Ref a b), (Ref c d), (Ref e f), (Ref g h)] (Quadruple a c e g))
    prn : (Fn [(Ref (Quadruple a b c d) q)] String)
    reverse : (Fn [(Ref (Quadruple a b c d) e)] (Quadruple d c b a))
    set-a : (Fn [(Quadruple a b c d), a] (Quadruple a b c d))
    set-a! : (Fn [(Ref (Quadruple a b c d) q), a] ())
    set-b : (Fn [(Quadruple a b c d), b] (Quadruple a b c d))
    set-b! : (Fn [(Ref (Quadruple a b c d) q), b] ())
    set-c : (Fn [(Quadruple a b c d), c] (Quadruple a b c d))
    set-c! : (Fn [(Ref (Quadruple a b c d) q), c] ())
    set-d : (Fn [(Quadruple a b c d), d] (Quadruple a b c d))
    set-d! : (Fn [(Ref (Quadruple a b c d) q), d] ())
    str : (Fn [(Ref (Quadruple a b c d) q)] String)
    update-a : (Fn [(Quadruple a b c d), (Ref (Fn [a] a fq) q)] (Quadruple a b c d))
    update-b : (Fn [(Quadruple a b c d), (Ref (Fn [b] b fq) q)] (Quadruple a b c d))
    update-c : (Fn [(Quadruple a b c d), (Ref (Fn [c] c fq) q)] (Quadruple a b c d))
    update-d : (Fn [(Quadruple a b c d), (Ref (Fn [d] d fq) q)] (Quadruple a b c d))
    zero : (Fn [] (Quadruple a b c d))

}
QuadrupleRef : Module = {
    < : (Fn [(Ref (Quadruple a b c d) e), (Ref (Quadruple a b c d) e)] Bool)
    > : (Fn [(Ref (Quadruple a b c d) e), (Ref (Quadruple a b c d) e)] Bool)

}
Quasiquote : Module = {
    quasiquote : Macro
    unquote : Macro
    unquote-splicing : Macro

}
Random : Module = {
    gen-seed-at-startup : Macro
    gen-seed-at-startup? : (Fn [] Bool)
    random : (Fn [] Double)
    seed : (Fn [] ())
    seed-from : (Fn [Double] ())

}
RefBool : Module = {
    = : (Fn [(Ref Bool a), (Ref Bool b)] Bool)

}
Result : Module = {
    = : (Fn [(Ref (Result a b) c), (Ref (Result a b) c)] Bool)
    Error : (Fn [b] (Result a b))
    Success : (Fn [a] (Result a b))
    and-then : (Fn [(Result a b), (Ref (Fn [a] (Result c b) d) e)] (Result c b))
    apply : (Fn [(Result a b), (Ref (Fn [a] c d) e), (Ref (Fn [b] f d) g)] (Result c f))
    copy : (Fn [(Ref (Result a b) q)] (Result a b))
    delete : (Fn [(Result a b)] ())
    error? : (Fn [(Ref (Result a b) c)] Bool)
    from-error : (Fn [(Result a b), b] b)
    from-success : (Fn [(Result a b), a] a)
    get-tag : (Fn [(Ref (Result a b) q)] Int)
    map : (Fn [(Result a b), (Ref (Fn [a] c d) e)] (Result c b))
    map-error : (Fn [(Result a b), (Ref (Fn [b] c d) e)] (Result a c))
    or-else : (Fn [(Result a b), (Ref (Fn [b] (Result a c) d) e)] (Result a c))
    prn : (Fn [(Ref (Result a b) q)] String)
    str : (Fn [(Ref (Result a b) q)] String)
    success? : (Fn [(Ref (Result a b) c)] Bool)
    to-maybe : (Fn [(Result a b)] (Maybe a))
    unsafe-from-error : (Fn [(Result a b)] b)
    unsafe-from-success : (Fn [(Result a b)] a)
    unwrap-or-else : (Fn [(Result a b), (Ref (Fn [b] a c) d)] a)
    unwrap-or-zero : (Fn [(Result a b)] a)

}
Set : Module = {
    = : (Fn [(Ref (Set a) b), (Ref (Set a) b)] Bool)
    all? : (Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (Set a) b)] Bool)
    buckets : (Fn [(Ref (Set a) q)] (Ref (Array (SetBucket a)) q))
    contains? : (Fn [(Ref (Set a) b), (Ref a b)] Bool)
    copy : (Fn [(Ref (Set a) q)] (Set a))
    create : (Fn [] (Set a))
    delete : (Fn [(Set a)] ())
    difference : (Fn [(Ref (Set a) b), (Ref (Set a) c)] (Set a))
    empty? : (Fn [(Ref (Set a) b)] Bool)
    for-each : (Fn [(Ref (Set a) b), (Ref (Fn [(Ref a b)] () c) d)] ())
    from-array : (Fn [(Ref (Array a) b)] (Set a))
    grow : (Fn [(Set a)] (Set a))
    init : (Fn [Int, Int, (Array (SetBucket a))] (Set a))
    intersection : (Fn [(Ref (Set a) b), (Ref (Set a) b)] (Set a))
    len : (Fn [(Ref (Set a) q)] (Ref Int q))
    length : (Fn [(Ref (Set a) b)] Int)
    max-load : Int
    min-load : Int
    n-buckets : (Fn [(Ref (Set a) q)] (Ref Int q))
    prn : (Fn [(Ref (Set a) q)] String)
    put : (Fn [(Set a), (Ref a b)] (Set a))
    put! : (Fn [(Ref (Set a) b), (Ref a b)] ())
    reduce : (Fn [(Ref (Fn [a, (Ref b c)] a d) e), a, (Ref (Set b) c)] a)
    remove : (Fn [(Set a), (Ref a b)] (Set a))
    resize : (Fn [(Set a), Int] (Set a))
    set-buckets : (Fn [(Set a), (Array (SetBucket a))] (Set a))
    set-buckets! : (Fn [(Ref (Set a) q), (Array (SetBucket a))] ())
    set-len : (Fn [(Set a), Int] (Set a))
    set-len! : (Fn [(Ref (Set a) q), Int] ())
    set-n-buckets : (Fn [(Set a), Int] (Set a))
    set-n-buckets! : (Fn [(Ref (Set a) q), Int] ())
    shrink : (Fn [(Set a)] (Set a))
    str : (Fn [(Ref (Set a) b)] String)
    subset? : (Fn [(Ref (Set a) b), (Ref (Set a) b)] Bool)
    to-array : (Fn [(Ref (Set a) b)] (Array a))
    union : (Fn [(Ref (Set a) b), (Ref (Set a) c)] (Set a))
    update-buckets : (Fn [(Set a), (Ref (Fn [(Array (SetBucket a))] (Array (SetBucket a)) fq) q)] (Set a))
    update-len : (Fn [(Set a), (Ref (Fn [Int] Int fq) q)] (Set a))
    update-n-buckets : (Fn [(Set a), (Ref (Fn [Int] Int fq) q)] (Set a))

}
SetBucket : Module = {
    contains? : (Fn [(Ref (SetBucket a) b), (Ref a b)] Bool)
    copy : (Fn [(Ref (SetBucket a) q)] (SetBucket a))
    delete : (Fn [(SetBucket a)] ())
    empty : (Fn [] (SetBucket a))
    entries : (Fn [(Ref (SetBucket a) q)] (Ref (Array a) q))
    grow : (Fn [(Ref (SetBucket a) b), a] (SetBucket a))
    init : (Fn [(Array a)] (SetBucket a))
    prn : (Fn [(Ref (SetBucket a) q)] String)
    push-back! : (Fn [(Ref (SetBucket a) b), a] ())
    remove : (Fn [(Ref (Array a) b), (Ref a b)] (Array a))
    set-entries : (Fn [(SetBucket a), (Array a)] (SetBucket a))
    set-entries! : (Fn [(Ref (SetBucket a) q), (Array a)] ())
    shrink : (Fn [(Ref (SetBucket a) b), (Ref a b)] (SetBucket a))
    str : (Fn [(Ref (SetBucket a) q)] String)
    update-entries : (Fn [(SetBucket a), (Ref (Fn [(Array a)] (Array a) fq) q)] (SetBucket a))

}
StaticArray : Module = {
    = : (Fn [(Ref (StaticArray a) b), (Ref (StaticArray a) b)] Bool)
    all? : (Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (StaticArray a) b)] Bool)
    any? : (Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (StaticArray a) b)] Bool)
    aset! : (Fn [(Ref (StaticArray t) q), Int, t] ())
    aset-uninitialized! : (Fn [(Ref (StaticArray t) q), Int, t] ())
    aupdate! : (Fn [(Ref (StaticArray a) b), Int, (Ref (Fn [a] a c) d)] ())
    contains? : (Fn [(Ref (StaticArray a) b), (Ref a b)] Bool)
    delete : (Fn [(StaticArray a)] ())
    element-count : (Fn [(Ref (StaticArray a) b), (Ref a b)] Int)
    empty? : (Fn [(Ref (StaticArray a) b)] Bool)
    find : (Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (StaticArray a) b)] (Maybe a))
    find-index : (Fn [(Ref (Fn [(Ref a b)] Bool c) d), (Ref (StaticArray a) b)] (Maybe Int))
    first : (Fn [(Ref (StaticArray a) b)] (Maybe a))
    foreach : Macro
    foreach-internal : Dynamic
    index-of : (Fn [(Ref (StaticArray a) b), (Ref a b)] (Maybe Int))
    last : (Fn [(Ref (StaticArray a) b)] (Maybe a))
    length : (Fn [(Ref (StaticArray t) q)] Int)
    map! : (Fn [(Ref (StaticArray a) b), (Ref (Fn [(Ref a b)] a c) d)] ())
    maximum : (Fn [(Ref (StaticArray a) b)] (Maybe a))
    minimum : (Fn [(Ref (StaticArray a) b)] (Maybe a))
    nth : (Fn [(Ref (StaticArray a) b), Int] (Maybe a))
    predicate-count : (Fn [(Ref (StaticArray a) b), (Ref (Fn [(Ref a b)] Bool c) d)] Int)
    reduce : (Fn [(Ref (Fn [a, (Ref b c)] a d) e), a, (Ref (StaticArray b) c)] a)
    reverse! : (Fn [(Ref (StaticArray a) b)] ())
    str : (Fn [(Ref (StaticArray a) q)] String)
    sum : (Fn [(Ref (StaticArray a) b)] a)
    swap! : (Fn [(Ref (StaticArray a) b), Int, Int] ())
    unsafe-first : (Fn [(Ref (StaticArray a) b)] a)
    unsafe-last : (Fn [(Ref (StaticArray a) b)] a)
    unsafe-nth : (Fn [(Ref (StaticArray t) q), Int] (Ref t q))
    unsafe-nth-value : (Fn [(Ref (StaticArray a) tyvar-from-info-0_190_38), Int] a)
    unsafe-raw : (Fn [(Ref (StaticArray t) tyvar-from-info-0_224_32)] (Ptr t))

}
String : Module = {
    < : (Fn [(Ref String tyvar-from-info-0_7_30), (Ref String tyvar-from-info-0_7_38)] Bool)
    = : (Fn [(Ref String tyvar-from-info-0_5_30), (Ref String tyvar-from-info-0_5_38)] Bool)
    > : (Fn [(Ref String tyvar-from-info-0_6_30), (Ref String tyvar-from-info-0_6_38)] Bool)
    allocate : (Fn [Int, Char] String)
    alpha? : (Fn [(Ref String a)] Bool)
    alphanum? : (Fn [(Ref String a)] Bool)
    append : (Fn [(Ref String tyvar-from-info-0_8_30), (Ref String tyvar-from-info-0_8_38)] String)
    char-at : (Fn [(Ref String tyvar-from-info-0_18_30), Int] Char)
    chars : (Fn [(Ref String tyvar-from-info-0_19_30)] (Array Char))
    chomp : (Fn [(Ref String a)] String)
    collapse-whitespace : (Fn [(Ref String a)] String)
    concat : (Fn [(Ref (Array String) a)] String)
    contains? : (Fn [(Ref String a), Char] Bool)
    copy : (Fn [(Ref String tyvar-from-info-0_10_30)] String)
    count-char : (Fn [(Ref String a), Char] Int)
    cstr : (Fn [(Ref String tyvar-from-info-0_12_30)] (Ptr CChar))
    delete : (Fn [String] ())
    empty? : (Fn [(Ref String a)] Bool)
    ends-with? : (Fn [(Ref String a), (Ref String b)] Bool)
    format : (Fn [(Ref String tyvar-from-info-0_22_26), (Ref String tyvar-from-info-0_22_34)] String)
    from-bytes : (Fn [(Ref (Array Byte) tyvar-from-info-0_27_30)] String)
    from-chars : (Fn [(Ref (Array Char) tyvar-from-info-0_20_30)] String)
    from-cstr : (Fn [(Ptr CChar)] String)
    hash : (Fn [(Ref String a)] Int)
    head : (Fn [(Ref String a)] Char)
    hex? : (Fn [(Ref String a)] Bool)
    in? : (Fn [(Ref String a), (Ref String b)] Bool)
    index-of : (Fn [(Ref String tyvar-from-info-0_16_30), Char] Int)
    index-of-from : (Fn [(Ref String tyvar-from-info-0_17_33), Char, Int] Int)
    join : (Fn [(Ref String a), (Ref (Array String) b)] String)
    join-with-char : (Fn [Char, (Ref (Array String) a)] String)
    length : (Fn [(Ref String tyvar-from-info-0_11_30)] Int)
    lines : (Fn [(Ref String a)] (Array String))
    lower? : (Fn [(Ref String a)] Bool)
    num? : (Fn [(Ref String a)] Bool)
    pad-left : (Fn [Int, Char, (Ref String a)] String)
    pad-right : (Fn [Int, Char, (Ref String a)] String)
    prefix : (Fn [(Ref String a), Int] String)
    prn : (Fn [(Ref String tyvar-from-info-0_15_30)] String)
    random-sized : (Fn [Int] String)
    repeat : (Fn [Int, (Ref String a)] String)
    reverse : (Fn [(Ref String a)] String)
    slice : (Fn [(Ref String a), Int, Int] String)
    split-by : (Fn [(Ref String a), (Ref (Array Char) b)] (Array String))
    starts-with? : (Fn [(Ref String a), (Ref String b)] Bool)
    str : (Fn [(Ref String tyvar-from-info-0_14_30)] String)
    string-set! : (Fn [(Ref String tyvar-from-info-0_24_31), Int, Char] ())
    string-set-at! : (Fn [(Ref String tyvar-from-info-0_25_34), Int, (Ref String tyvar-from-info-0_25_46)] ())
    suffix : (Fn [(Ref String a), Int] String)
    sum-length : (Fn [(Ref (Array String) a)] Int)
    tail : (Fn [(Ref String tyvar-from-info-0_21_22)] String)
    to-bytes : (Fn [(Ref String tyvar-from-info-0_28_28)] (Array Byte))
    trim : (Fn [(Ref String a)] String)
    trim-left : (Fn [(Ref String a)] String)
    trim-right : (Fn [(Ref String a)] String)
    upper? : (Fn [(Ref String a)] Bool)
    words : (Fn [(Ref String a)] (Array String))
    zero : (Fn [] String)

}
StringCopy : Module = {
    < : (Fn [String, String] Bool)
    = : (Fn [String, String] Bool)
    > : (Fn [String, String] Bool)
    prn : (Fn [String] String)
    str : (Fn [String] String)

}
System : Module = {
    EACCES : Int
    EEXIST : Int
    EINTR : Int
    EINVAL : Int
    EIO : Int
    EISDIR : Int
    ELOOP : Int
    EMFILE : Int
    ENAMETOOLONG : Int
    ENOENT : Int
    ENOMEM : Int
    ENOSPC : Int
    ENOSR : Int
    ENOTDIR : Int
    ENXIO : Int
    EOVERFLOW : Int
    EROFS : Int
    abort : (Fn [] ())
    args : (StaticArray String)
    carp-init-globals : (Fn [Int, (Ptr (Ptr CChar))] ())
    errno : Int
    exit : (Fn [Int] a)
    fork : (Fn [] Int)
    get-exit-status : (Fn [Int] Int)
    nanotime : (Fn [] Long)
    signal : (Fn [Int, (Fn [Int] ())] ())
    signal-abort : Int
    signal-fpe : Int
    signal-ill : Int
    signal-int : Int
    signal-segv : Int
    signal-term : Int
    sleep-micros : (Fn [Int] ())
    sleep-seconds : (Fn [Int] ())
    system : (Fn [(Ref String tyvar-from-info-0_16_26)] Int)
    time : (Fn [] Int)
    wait : (Fn [(Ptr Int)] Int)

}
Triple : Module = {
    < : (Fn [(Triple a b c), (Triple a b c)] Bool)
    = : (Fn [(Ref (Triple a b c) d), (Ref (Triple a b c) d)] Bool)
    > : (Fn [(Triple a b c), (Triple a b c)] Bool)
    a : (Fn [(Ref (Triple a b c) q)] (Ref a q))
    b : (Fn [(Ref (Triple a b c) q)] (Ref b q))
    c : (Fn [(Ref (Triple a b c) q)] (Ref c q))
    copy : (Fn [(Ref (Triple a b c) q)] (Triple a b c))
    delete : (Fn [(Triple a b c)] ())
    init : (Fn [a, b, c] (Triple a b c))
    init-from-refs : (Fn [(Ref a b), (Ref c d), (Ref e f)] (Triple a c e))
    prn : (Fn [(Ref (Triple a b c) q)] String)
    reverse : (Fn [(Ref (Triple a b c) d)] (Triple c b a))
    set-a : (Fn [(Triple a b c), a] (Triple a b c))
    set-a! : (Fn [(Ref (Triple a b c) q), a] ())
    set-b : (Fn [(Triple a b c), b] (Triple a b c))
    set-b! : (Fn [(Ref (Triple a b c) q), b] ())
    set-c : (Fn [(Triple a b c), c] (Triple a b c))
    set-c! : (Fn [(Ref (Triple a b c) q), c] ())
    str : (Fn [(Ref (Triple a b c) q)] String)
    update-a : (Fn [(Triple a b c), (Ref (Fn [a] a fq) q)] (Triple a b c))
    update-b : (Fn [(Triple a b c), (Ref (Fn [b] b fq) q)] (Triple a b c))
    update-c : (Fn [(Triple a b c), (Ref (Fn [c] c fq) q)] (Triple a b c))
    zero : (Fn [] (Triple a b c))

}
TripleRef : Module = {
    < : (Fn [(Ref (Triple a b c) d), (Ref (Triple a b c) d)] Bool)
    > : (Fn [(Ref (Triple a b c) d), (Ref (Triple a b c) d)] Bool)

}
Uint16 : Module = {
    * : (Fn [Uint16, Uint16] Uint16)
    + : (Fn [Uint16, Uint16] Uint16)
    - : (Fn [Uint16, Uint16] Uint16)
    / : (Fn [Uint16, Uint16] Uint16)
    < : (Fn [Uint16, Uint16] Bool)
    = : (Fn [Uint16, Uint16] Bool)
    > : (Fn [Uint16, Uint16] Bool)
    bit-and : (Fn [Uint16, Uint16] Uint16)
    bit-not : (Fn [Uint16] Uint16)
    bit-or : (Fn [Uint16, Uint16] Uint16)
    bit-shift-left : (Fn [Uint16, Uint16] Uint16)
    bit-shift-right : (Fn [Uint16, Uint16] Uint16)
    bit-xor : (Fn [Uint16, Uint16] Uint16)
    blit : (Fn [Uint16] Uint16)
    copy : (Fn [(Ref Uint16 tyvar-from-info-0_248_24)] Uint16)
    from-bytes : (Fn [(Ref (Array Byte) tyvar-from-info-0_252_30)] (Array Uint16))
    from-long : (Fn [Long] Uint16)
    hash : (Fn [(Ref Uint16 a)] Int)
    prn : (Fn [Uint16] String)
    str : (Fn [Uint16] String)
    to-long : (Fn [Uint16] Long)
    zero : (Fn [] Uint16)

}
Uint16Extra : Module = {
    = : (Fn [(Ref Uint16 a), (Ref Uint16 b)] Bool)
    prn : (Fn [(Ref Uint16 a)] String)
    str : (Fn [(Ref Uint16 a)] String)

}
Uint32 : Module = {
    * : (Fn [Uint32, Uint32] Uint32)
    + : (Fn [Uint32, Uint32] Uint32)
    - : (Fn [Uint32, Uint32] Uint32)
    / : (Fn [Uint32, Uint32] Uint32)
    < : (Fn [Uint32, Uint32] Bool)
    = : (Fn [Uint32, Uint32] Bool)
    > : (Fn [Uint32, Uint32] Bool)
    bit-and : (Fn [Uint32, Uint32] Uint32)
    bit-not : (Fn [Uint32] Uint32)
    bit-or : (Fn [Uint32, Uint32] Uint32)
    bit-shift-left : (Fn [Uint32, Uint32] Uint32)
    bit-shift-right : (Fn [Uint32, Uint32] Uint32)
    bit-xor : (Fn [Uint32, Uint32] Uint32)
    blit : (Fn [Uint32] Uint32)
    copy : (Fn [(Ref Uint32 tyvar-from-info-0_292_24)] Uint32)
    from-bytes : (Fn [(Ref (Array Byte) tyvar-from-info-0_296_30)] (Array Uint32))
    from-long : (Fn [Long] Uint32)
    hash : (Fn [(Ref Uint32 a)] Int)
    prn : (Fn [Uint32] String)
    str : (Fn [Uint32] String)
    to-long : (Fn [Uint32] Long)
    zero : (Fn [] Uint32)

}
Uint32Extra : Module = {
    = : (Fn [(Ref Uint32 a), (Ref Uint32 b)] Bool)
    prn : (Fn [(Ref Uint32 a)] String)
    str : (Fn [(Ref Uint32 a)] String)

}
Uint64 : Module = {
    * : (Fn [Uint64, Uint64] Uint64)
    + : (Fn [Uint64, Uint64] Uint64)
    - : (Fn [Uint64, Uint64] Uint64)
    / : (Fn [Uint64, Uint64] Uint64)
    < : (Fn [Uint64, Uint64] Bool)
    = : (Fn [Uint64, Uint64] Bool)
    > : (Fn [Uint64, Uint64] Bool)
    bit-and : (Fn [Uint64, Uint64] Uint64)
    bit-not : (Fn [Uint64] Uint64)
    bit-or : (Fn [Uint64, Uint64] Uint64)
    bit-shift-left : (Fn [Uint64, Uint64] Uint64)
    bit-shift-right : (Fn [Uint64, Uint64] Uint64)
    bit-xor : (Fn [Uint64, Uint64] Uint64)
    blit : (Fn [Uint64] Uint64)
    copy : (Fn [(Ref Uint64 tyvar-from-info-0_336_24)] Uint64)
    from-bytes : (Fn [(Ref (Array Byte) tyvar-from-info-0_340_30)] (Array Uint64))
    from-long : (Fn [Long] Uint64)
    hash : (Fn [(Ref Uint64 a)] Int)
    prn : (Fn [Uint64] String)
    str : (Fn [Uint64] String)
    to-long : (Fn [Uint64] Long)
    zero : (Fn [] Uint64)

}
Uint64Extra : Module = {
    = : (Fn [(Ref Uint64 a), (Ref Uint64 b)] Bool)
    prn : (Fn [(Ref Uint64 a)] String)
    str : (Fn [(Ref Uint64 a)] String)

}
Uint8 : Module = {
    * : (Fn [Uint8, Uint8] Uint8)
    + : (Fn [Uint8, Uint8] Uint8)
    - : (Fn [Uint8, Uint8] Uint8)
    / : (Fn [Uint8, Uint8] Uint8)
    < : (Fn [Uint8, Uint8] Bool)
    = : (Fn [Uint8, Uint8] Bool)
    > : (Fn [Uint8, Uint8] Bool)
    bit-and : (Fn [Uint8, Uint8] Uint8)
    bit-not : (Fn [Uint8] Uint8)
    bit-or : (Fn [Uint8, Uint8] Uint8)
    bit-shift-left : (Fn [Uint8, Uint8] Uint8)
    bit-shift-right : (Fn [Uint8, Uint8] Uint8)
    bit-xor : (Fn [Uint8, Uint8] Uint8)
    blit : (Fn [Uint8] Uint8)
    copy : (Fn [(Ref Uint8 tyvar-from-info-0_204_24)] Uint8)
    from-bytes : (Fn [(Ref (Array Byte) tyvar-from-info-0_208_30)] (Array Uint8))
    from-long : (Fn [Long] Uint8)
    hash : (Fn [(Ref Uint8 a)] Int)
    prn : (Fn [Uint8] String)
    str : (Fn [Uint8] String)
    to-long : (Fn [Uint8] Long)
    zero : (Fn [] Uint8)

}
Uint8Extra : Module = {
    = : (Fn [(Ref Uint8 a), (Ref Uint8 b)] Bool)
    prn : (Fn [(Ref Uint8 a)] String)
    str : (Fn [(Ref Uint8 a)] String)

}
Unit : Module = {
    = : (Fn [(), ()] Bool)
    copy : (Fn [(Ref () a)] ())
    prn : (Fn [()] String)
    zero : (Fn [] ())

}
UnitRef : Module = {
    = : (Fn [(Ref () a), (Ref () b)] Bool)

}
Unsafe : Module = {
    C : Module = {
        asm : Macro
        define : Macro
        emit-c-line : Dynamic
        error : Macro
        if- : Dynamic
        ifdef : Macro
        ifndef : Macro
        ifpre : Macro
        pragma : Macro
        undef : Macro
        warning : Macro

    }
    coerce : (Fn [b] a)
    emit-c : Dynamic
    leak : (Fn [a] ())
    preproc : Dynamic

}
add-c : Dynamic
add-cflag : Dynamic
add-lib : Dynamic
add-pkg : Dynamic
and : Macro
and* : Macro
annotate : Macro
annotate-helper : Dynamic
assert : Macro
between : (Fn [a, a, a] Bool)
bottom : (Fn [] a)
break : (missing-type)
build-str* : Dynamic
build-vararg : Dynamic
case : Macro
case-internal : Dynamic
clamp : (Fn [a, a, a] a)
clamp--1-1 : (Fn [a] a)
cmp : (Fn [a, a] Int)
comment : Macro
comp : Macro
comp-internal : Dynamic
cond : Macro
cond-internal : Dynamic
const : (Fn [a] (Fn [b] a c))
const-assert : Dynamic
current-file : Dynamic
def : (missing-type)
def- : Macro
defdynamic-once : Macro
defn : (missing-type)
defn- : Macro
defn-do : Macro
defproject : Macro
deprecated : Macro
deref : (missing-type)
do : (missing-type)
doall : Macro
doc : Macro
doto : Macro
doto-ref : Macro
enum-to-int : (Fn [a] Int)
fmt : Macro
fn : (missing-type)
for : Macro
foreach : Macro
foreach-internal : Dynamic
forever-do : Macro
freebsd-only : Macro
freebsd-target? : Dynamic
fstr : Macro
gensym : Dynamic
gensym-local : Dynamic
gensym-with : Dynamic
hidden : Macro
hidden? : Macro
id : (Fn [a] a)
if : (missing-type)
ignore : Macro
implement-declaration : Dynamic
implements-all : Macro
inline-c : Macro
lerp : (Fn [a, a, a] a)
let : (missing-type)
let-do : Macro
linux-only : Macro
linux-target? : Dynamic
list-to-array-internal : Dynamic
load-and-use : Macro
mac-only : Macro
mac-target? : Dynamic
map-internal : Dynamic
match : (missing-type)
match-ref : (missing-type)
max : (Fn [a, a] a)
min : (Fn [a, a] a)
native-triple : Dynamic
neg? : (Fn [a] Bool)
netbsd-only : Macro
netbsd-target? : Dynamic
not : (Fn [Bool] Bool)
not-neg? : (Fn [a] Bool)
not-null? : (Fn [(Ptr a)] Bool)
null? : (Fn [(Ptr a)] Bool)
or : Macro
or* : Macro
pkg-config : Dynamic
pos? : (Fn [a] Bool)
posix-only : Macro
posix-target? : Dynamic
print* : Macro
print-doc : Macro
print-sig : Macro
println* : Macro
private : Macro
private? : Macro
project-config : Dynamic
random--1-1 : (Fn [] a)
random-0-1 : (Fn [] a)
ref : (missing-type)
refstr : Macro
relative-to : Dynamic
save-docs : Macro
set! : (missing-type)
sig : Macro
str* : Macro
swap! : Macro
target-abi : Dynamic
target-arch : Dynamic
target-only : Dynamic
target-os : Dynamic
target-os? : Dynamic
target-triple : Dynamic
the : (missing-type)
thread-first-internal : Dynamic
thread-last-internal : Dynamic
todo : Macro
unless : Macro
unreachable : Macro
until : Macro
update! : Macro
use-all : Macro
use-all-fn : Dynamic
when : Macro
while : (missing-type)
while-do : Macro
windows-only : Macro
windows-target? : Dynamic
with : (missing-type)
zero? : (Fn [a] Bool)

Used modules:
 * Derive
 * Quasiquote
 * String

--PROMPT--