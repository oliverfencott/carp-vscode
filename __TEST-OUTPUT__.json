{
  "bindings": [
    {
      "type": "Dynamic",
      "info": {
        "line": 0,
        "column": 0,
        "file": "dummy-file"
      },
      "isBuiltIn": false,
      "symbol": "*gensym-counter*",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 37,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "-->",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 34,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "->",
      "meta": {}
    },
    {
      "type": "(Fn [a, a] Bool)",
      "info": {
        "line": 107,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "/=",
      "meta": {}
    },
    {
      "type": "(Fn [Char, Char] Bool)",
      "info": {
        "line": 107,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "/=__Char",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [Int, Int] Bool)",
      "info": {
        "line": 107,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "/=__int",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [Byte, Byte] Bool)",
      "info": {
        "line": 107,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "/=__uint8_t",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [a, a] Bool)",
      "info": {
        "line": 45,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "<=",
      "meta": {}
    },
    {
      "type": "(Fn [Char, Char] Bool)",
      "info": {
        "line": 45,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "<=__Char",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [Int, Int] Bool)",
      "info": {
        "line": 45,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "<=__int",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 31,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "==>",
      "meta": {
        "deprecated": "\"deprecated in favor of `==>`.\""
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 27,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "=>",
      "meta": {
        "deprecated": "\"deprecated in favor of `->`.\""
      }
    },
    {
      "type": "(Fn [a, a] Bool)",
      "info": {
        "line": 49,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": ">=",
      "meta": {}
    },
    {
      "type": "(Fn [Int, Int] Bool)",
      "info": {
        "line": 49,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": ">=__int",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": false,
      "symbol": "Array",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 32,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Binary.carp"
      },
      "isBuiltIn": false,
      "symbol": "Binary",
      "meta": {}
    },
    {
      "type": "(Fn [(Ref Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint16_29_env_ty a)] Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint16_29_env_ty)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint16_29_env_ty_copy template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint16_29_env_ty_copy",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint16_29_env_ty)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint16_29_env_ty_delete template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint16_29_env_ty_delete",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ref Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint32_29_env_ty a)] Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint32_29_env_ty)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint32_29_env_ty_copy template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint32_29_env_ty_copy",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint32_29_env_ty)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint32_29_env_ty_delete template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint32_29_env_ty_delete",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ref Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint64_29_env_ty a)] Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint64_29_env_ty)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint64_29_env_ty_copy template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint64_29_env_ty_copy",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint64_29_env_ty)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint64_29_env_ty_delete template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_byte_MINUS_converter__ByteOrder_Array__uint8_t_Uint64_29_env_ty_delete",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ref Binary__Lambda_int16_MINUS_seq_MINUS__GT_bytes_16_env_ty a)] Binary__Lambda_int16_MINUS_seq_MINUS__GT_bytes_16_env_ty)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_int16_MINUS_seq_MINUS__GT_bytes_16_env_ty_copy template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_int16_MINUS_seq_MINUS__GT_bytes_16_env_ty_copy",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr Binary__Lambda_int16_MINUS_seq_MINUS__GT_bytes_16_env_ty)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_int16_MINUS_seq_MINUS__GT_bytes_16_env_ty_delete template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_int16_MINUS_seq_MINUS__GT_bytes_16_env_ty_delete",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ref Binary__Lambda_int32_MINUS__GT_bytes_16_env_ty a)] Binary__Lambda_int32_MINUS__GT_bytes_16_env_ty)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_int32_MINUS__GT_bytes_16_env_ty_copy template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_int32_MINUS__GT_bytes_16_env_ty_copy",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr Binary__Lambda_int32_MINUS__GT_bytes_16_env_ty)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_int32_MINUS__GT_bytes_16_env_ty_delete template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_int32_MINUS__GT_bytes_16_env_ty_delete",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ref Binary__Lambda_int32_MINUS_seq_MINUS__GT_bytes_16_env_ty a)] Binary__Lambda_int32_MINUS_seq_MINUS__GT_bytes_16_env_ty)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_int32_MINUS_seq_MINUS__GT_bytes_16_env_ty_copy template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_int32_MINUS_seq_MINUS__GT_bytes_16_env_ty_copy",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr Binary__Lambda_int32_MINUS_seq_MINUS__GT_bytes_16_env_ty)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_int32_MINUS_seq_MINUS__GT_bytes_16_env_ty_delete template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_int32_MINUS_seq_MINUS__GT_bytes_16_env_ty_delete",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ref Binary__Lambda_int64_MINUS__GT_bytes_16_env_ty a)] Binary__Lambda_int64_MINUS__GT_bytes_16_env_ty)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_int64_MINUS__GT_bytes_16_env_ty_copy template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_int64_MINUS__GT_bytes_16_env_ty_copy",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr Binary__Lambda_int64_MINUS__GT_bytes_16_env_ty)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_int64_MINUS__GT_bytes_16_env_ty_delete template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_int64_MINUS__GT_bytes_16_env_ty_delete",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ref Binary__Lambda_int64_MINUS_seq_MINUS__GT_bytes_16_env_ty a)] Binary__Lambda_int64_MINUS_seq_MINUS__GT_bytes_16_env_ty)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_int64_MINUS_seq_MINUS__GT_bytes_16_env_ty_copy template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_int64_MINUS_seq_MINUS__GT_bytes_16_env_ty_copy",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr Binary__Lambda_int64_MINUS_seq_MINUS__GT_bytes_16_env_ty)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_int64_MINUS_seq_MINUS__GT_bytes_16_env_ty_delete template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_int64_MINUS_seq_MINUS__GT_bytes_16_env_ty_delete",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ref Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int16_MINUS_seq_19_env_ty a)] Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int16_MINUS_seq_19_env_ty)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int16_MINUS_seq_19_env_ty_copy template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int16_MINUS_seq_19_env_ty_copy",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int16_MINUS_seq_19_env_ty)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int16_MINUS_seq_19_env_ty_delete template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int16_MINUS_seq_19_env_ty_delete",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ref Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int32_MINUS_seq_19_env_ty a)] Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int32_MINUS_seq_19_env_ty)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int32_MINUS_seq_19_env_ty_copy template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int32_MINUS_seq_19_env_ty_copy",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int32_MINUS_seq_19_env_ty)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int32_MINUS_seq_19_env_ty_delete template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int32_MINUS_seq_19_env_ty_delete",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ref Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int64_MINUS_seq_19_env_ty a)] Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int64_MINUS_seq_19_env_ty)",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int64_MINUS_seq_19_env_ty_copy template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int64_MINUS_seq_19_env_ty_copy",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int64_MINUS_seq_19_env_ty)] ())",
      "info": {
        "line": -1,
        "column": -1,
        "file": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int64_MINUS_seq_19_env_ty_delete template"
      },
      "isBuiltIn": false,
      "symbol": "Binary__Lambda_unsafe_MINUS_bytes_MINUS__GT_int64_MINUS_seq_19_env_ty_delete",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "Module",
      "info": {
        "line": 21,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Bool",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 307,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/String.carp"
      },
      "isBuiltIn": false,
      "symbol": "BoolRef",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": false,
      "symbol": "Box",
      "meta": {}
    },
    {
      "type": "Module",
      "info": null,
      "isBuiltIn": false,
      "symbol": "Bucket",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 25,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Byte",
      "meta": {}
    },
    {
      "type": "Module",
      "info": null,
      "isBuiltIn": false,
      "symbol": "ByteOrder",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 80,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Byte.carp"
      },
      "isBuiltIn": false,
      "symbol": "ByteRef",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 17,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Char",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 60,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Char.carp"
      },
      "isBuiltIn": false,
      "symbol": "CharRef",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 3,
        "column": 13,
        "file": "/Users/oliverfencott/.carp/core/Control.carp"
      },
      "isBuiltIn": false,
      "symbol": "Control",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 3,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Debug.carp"
      },
      "isBuiltIn": false,
      "symbol": "Debug",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 10,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Derive.carp"
      },
      "isBuiltIn": false,
      "symbol": "Derive",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 13,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Double",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 107,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Double.carp"
      },
      "isBuiltIn": false,
      "symbol": "DoubleRef",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": false,
      "symbol": "Dynamic",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 9,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Float",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 112,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Float.carp"
      },
      "isBuiltIn": false,
      "symbol": "FloatRef",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": false,
      "symbol": "Function",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 3,
        "column": 13,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "Generics",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 7,
        "column": 13,
        "file": "/Users/oliverfencott/.carp/core/Heap.carp"
      },
      "isBuiltIn": false,
      "symbol": "Heap",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 145,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Heap.carp"
      },
      "isBuiltIn": false,
      "symbol": "HeapSort",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 5,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/IO.carp"
      },
      "isBuiltIn": false,
      "symbol": "IO",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 1,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Int",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 33,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Int16",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 95,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/StdInt.carp"
      },
      "isBuiltIn": false,
      "symbol": "Int16Extra",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 37,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Int32",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 139,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/StdInt.carp"
      },
      "isBuiltIn": false,
      "symbol": "Int32Extra",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 41,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Int64",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 183,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/StdInt.carp"
      },
      "isBuiltIn": false,
      "symbol": "Int64Extra",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 29,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Int8",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 51,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/StdInt.carp"
      },
      "isBuiltIn": false,
      "symbol": "Int8Extra",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 101,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Int.carp"
      },
      "isBuiltIn": false,
      "symbol": "IntRef",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 4,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Introspect.carp"
      },
      "isBuiltIn": false,
      "symbol": "Introspect",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 5,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Long",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 68,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Long.carp"
      },
      "isBuiltIn": false,
      "symbol": "LongRef",
      "meta": {}
    },
    {
      "type": "Module",
      "info": null,
      "isBuiltIn": false,
      "symbol": "Map",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 114,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Heap.carp"
      },
      "isBuiltIn": false,
      "symbol": "MaxHeap",
      "meta": {}
    },
    {
      "type": "Module",
      "info": null,
      "isBuiltIn": false,
      "symbol": "Maybe",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 83,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Heap.carp"
      },
      "isBuiltIn": false,
      "symbol": "MinHeap",
      "meta": {}
    },
    {
      "type": "(Ptr a)",
      "info": {
        "line": 0,
        "column": 0,
        "file": "dummy-file"
      },
      "isBuiltIn": false,
      "symbol": "NULL",
      "meta": {}
    },
    {
      "type": "Module",
      "info": null,
      "isBuiltIn": false,
      "symbol": "Opaque",
      "meta": {}
    },
    {
      "type": "Module",
      "info": null,
      "isBuiltIn": false,
      "symbol": "Pair",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 0,
        "column": 0,
        "file": "dummy-file"
      },
      "isBuiltIn": false,
      "symbol": "PairRef",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 3,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Pattern.carp"
      },
      "isBuiltIn": false,
      "symbol": "Pattern",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": false,
      "symbol": "Pointer",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 72,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Char.carp"
      },
      "isBuiltIn": false,
      "symbol": "PtrChar",
      "meta": {}
    },
    {
      "type": "Module",
      "info": null,
      "isBuiltIn": false,
      "symbol": "Quadruple",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 0,
        "column": 0,
        "file": "dummy-file"
      },
      "isBuiltIn": false,
      "symbol": "QuadrupleRef",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 5,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Quasiquote.carp"
      },
      "isBuiltIn": false,
      "symbol": "Quasiquote",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 1,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Random.carp"
      },
      "isBuiltIn": false,
      "symbol": "Random",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 17,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Bool.carp"
      },
      "isBuiltIn": false,
      "symbol": "RefBool",
      "meta": {}
    },
    {
      "type": "Module",
      "info": null,
      "isBuiltIn": false,
      "symbol": "Result",
      "meta": {}
    },
    {
      "type": "Module",
      "info": null,
      "isBuiltIn": false,
      "symbol": "Set",
      "meta": {}
    },
    {
      "type": "Module",
      "info": null,
      "isBuiltIn": false,
      "symbol": "SetBucket",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": false,
      "symbol": "StaticArray",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 3,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/String.carp"
      },
      "isBuiltIn": false,
      "symbol": "String",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 171,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/String.carp"
      },
      "isBuiltIn": false,
      "symbol": "StringCopy",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 4,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/System.carp"
      },
      "isBuiltIn": false,
      "symbol": "System",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 97,
        "column": 13,
        "file": "/Users/oliverfencott/Desktop/projects/carp-vscode/examples/test.carp"
      },
      "isBuiltIn": false,
      "symbol": "Test",
      "meta": {}
    },
    {
      "type": "Module",
      "info": null,
      "isBuiltIn": false,
      "symbol": "Triple",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 0,
        "column": 0,
        "file": "dummy-file"
      },
      "isBuiltIn": false,
      "symbol": "TripleRef",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 49,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Uint16",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 271,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/StdInt.carp"
      },
      "isBuiltIn": false,
      "symbol": "Uint16Extra",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 53,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Uint32",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 315,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/StdInt.carp"
      },
      "isBuiltIn": false,
      "symbol": "Uint32Extra",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 57,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Uint64",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 359,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/StdInt.carp"
      },
      "isBuiltIn": false,
      "symbol": "Uint64Extra",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 45,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Blitable.carp"
      },
      "isBuiltIn": false,
      "symbol": "Uint8",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 227,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/StdInt.carp"
      },
      "isBuiltIn": false,
      "symbol": "Uint8Extra",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 1,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Unit.carp"
      },
      "isBuiltIn": false,
      "symbol": "Unit",
      "meta": {}
    },
    {
      "type": "Module",
      "info": {
        "line": 28,
        "column": 12,
        "file": "/Users/oliverfencott/.carp/core/Unit.carp"
      },
      "isBuiltIn": false,
      "symbol": "UnitRef",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": false,
      "symbol": "Unsafe",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 103,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Dynamic.carp"
      },
      "isBuiltIn": false,
      "symbol": "add-c",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 76,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Dynamic.carp"
      },
      "isBuiltIn": false,
      "symbol": "add-cflag",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 79,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Dynamic.carp"
      },
      "isBuiltIn": false,
      "symbol": "add-lib",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 90,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Dynamic.carp"
      },
      "isBuiltIn": false,
      "symbol": "add-pkg",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 4,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "and",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 214,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "and*",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 129,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "annotate",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 125,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "annotate-helper",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 61,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Debug.carp"
      },
      "isBuiltIn": false,
      "symbol": "assert",
      "meta": {}
    },
    {
      "type": "(Fn [a, a, a] Bool)",
      "info": {
        "line": 98,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "between",
      "meta": {}
    },
    {
      "type": "(Fn [] a)",
      "info": {
        "line": 0,
        "column": 0,
        "file": "bottom.template"
      },
      "isBuiltIn": false,
      "symbol": "bottom",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "break",
      "meta": {
        "doc": "\"is used to break out of loops.\\n\\nExample:\\n```\\n(while true\\n  (break))\\n```\""
      }
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 481,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/String.carp"
      },
      "isBuiltIn": false,
      "symbol": "build-str*",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 207,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "build-vararg",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 126,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "case",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 114,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "case-internal",
      "meta": {}
    },
    {
      "type": "(Fn [a, a, a] a)",
      "info": {
        "line": 85,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "clamp",
      "meta": {}
    },
    {
      "type": "(Fn [a] a)",
      "info": {
        "line": 92,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "clamp--1-1",
      "meta": {}
    },
    {
      "type": "(Fn [a, a] Int)",
      "info": {
        "line": 53,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "cmp",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 204,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "comment",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 46,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "comp",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 40,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "comp-internal",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 174,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "cond",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 151,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "cond-internal",
      "meta": {}
    },
    {
      "type": "(Fn [a] (Fn [b] a c))",
      "info": {
        "line": 77,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "const",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 228,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "const-assert",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 95,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Dynamic.carp"
      },
      "isBuiltIn": false,
      "symbol": "current-file",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "def",
      "meta": {
        "doc": "\"is used to bind a variable.\\n\\nExample:\\n```\\n(def variable \\\"value\\\")\\n```\""
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 145,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "def-",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 232,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "defdynamic-once",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "defn",
      "meta": {
        "doc": "\"is used to define a function.\\n\\nExample:\\n```\\n(defn name [arg] body)\\n```\""
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 138,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "defn-",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 102,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "defn-do",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 9,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Project.carp"
      },
      "isBuiltIn": false,
      "symbol": "defproject",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 133,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "deprecated",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "deref",
      "meta": {
        "doc": "\"is used to call references. Long form of `~expression`.\\n\\nExample:\\n```\\n(deref expression)\\n```\""
      }
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "do",
      "meta": {
        "doc": "\"is used to group statements.\\n\\nExample:\\n```\\n(do (println* \\\"hi\\\") 1) ; => 1\\n```\""
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 451,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "isBuiltIn": false,
      "symbol": "doall",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 81,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "doc",
      "meta": {
        "doc": "\"Set documentation for a binding.\""
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 62,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "doto",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 80,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "doto-ref",
      "meta": {}
    },
    {
      "type": "(Fn [a] Int)",
      "info": {
        "line": 0,
        "column": 0,
        "file": "enum-to-int.template"
      },
      "isBuiltIn": false,
      "symbol": "enum-to-int",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 80,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Format.carp"
      },
      "isBuiltIn": false,
      "symbol": "f-internal",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 59,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Format.carp"
      },
      "isBuiltIn": false,
      "symbol": "f-parse-expr",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 47,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Format.carp"
      },
      "isBuiltIn": false,
      "symbol": "f-parse-expr-string",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 43,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Format.carp"
      },
      "isBuiltIn": false,
      "symbol": "fmt",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 3,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Format.carp"
      },
      "isBuiltIn": false,
      "symbol": "fmt-internal",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "fn",
      "meta": {
        "doc": "\"is used to define anonymous functions.\\n\\nExample:\\n```\\n(fn [arg] body)\\n```\""
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 2,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "isBuiltIn": false,
      "symbol": "for",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 465,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "isBuiltIn": false,
      "symbol": "foreach",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 455,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Array.carp"
      },
      "isBuiltIn": false,
      "symbol": "foreach-internal",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 105,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "forever-do",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 60,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "freebsd-only",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 37,
        "column": 29,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "freebsd-target?",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 107,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Format.carp"
      },
      "isBuiltIn": false,
      "symbol": "fstr",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 15,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Gensym.carp"
      },
      "isBuiltIn": false,
      "symbol": "gensym",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 5,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Gensym.carp"
      },
      "isBuiltIn": false,
      "symbol": "gensym-local",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 9,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Gensym.carp"
      },
      "isBuiltIn": false,
      "symbol": "gensym-with",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 106,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "hidden",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 122,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "hidden?",
      "meta": {}
    },
    {
      "type": "(Fn [a] a)",
      "info": {
        "line": 76,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "id",
      "meta": {}
    },
    {
      "type": "(Fn [Int] Int)",
      "info": {
        "line": 76,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "id__int",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "if",
      "meta": {
        "doc": "\"is used for conditional expressions.\\n\\nExample:\\n```\\n(if conditional\\n  then-branch\\n  else-branch)\\n```\""
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 220,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "ignore",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 263,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "implement-declaration",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 269,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "implements-all",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 239,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "inline-c",
      "meta": {}
    },
    {
      "type": "(Fn [a, a, a] a)",
      "info": {
        "line": 95,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "lerp",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "let",
      "meta": {
        "doc": "\"is used to introduce local variables.\\n\\nExample:\\n```\\n(let [var-name expression]\\n  body-with-var-defined)\\n```\""
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 94,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "let-do",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 56,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "linux-only",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 31,
        "column": 27,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "linux-target?",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 16,
        "column": 5,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "list-to-array-internal",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 199,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "load-and-use",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 52,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "mac-only",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 34,
        "column": 25,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "mac-target?",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 11,
        "column": 5,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "map-internal",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "match",
      "meta": {
        "doc": "\"is used for matching on sumtypes.\\n\\nExample:\\n```\\n(match expression-returing-a-sumtype\\n  (Constructor value) (something-with value)\\n  _ \\\"wildcard\\\")\\n```\""
      }
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "match-ref",
      "meta": {
        "doc": "\"is used for matching, like `match`, but takes references.\\n\\nExample:\\n```\\n(match-ref expression-sumtype-ref\\n  (Constructor value-ref) value-ref\\n  _ \\\"wildcard\\\")\\n```\""
      }
    },
    {
      "type": "(Fn [a, a] a)",
      "info": {
        "line": 58,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "max",
      "meta": {}
    },
    {
      "type": "(Fn [Int, Int] Int)",
      "info": {
        "line": 58,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "max__int",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [a, a] a)",
      "info": {
        "line": 61,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "min",
      "meta": {}
    },
    {
      "type": "(Fn [Int, Int] Int)",
      "info": {
        "line": 61,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "min__int",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 2,
        "column": 27,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "native-triple",
      "meta": {}
    },
    {
      "type": "(Fn [a] Bool)",
      "info": {
        "line": 70,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "neg?",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 64,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "netbsd-only",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 40,
        "column": 28,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "netbsd-target?",
      "meta": {}
    },
    {
      "type": "(Fn [Bool] Bool)",
      "info": {
        "line": 23,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Bool.carp"
      },
      "isBuiltIn": false,
      "symbol": "not",
      "meta": {}
    },
    {
      "type": "(Fn [a] Bool)",
      "info": {
        "line": 73,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "not-neg?",
      "meta": {}
    },
    {
      "type": "(Fn [(Ptr a)] Bool)",
      "info": {
        "line": 82,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "not-null?",
      "meta": {}
    },
    {
      "type": "(Fn [(Ptr a)] Bool)",
      "info": {
        "line": 79,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "null?",
      "meta": {}
    },
    {
      "type": "(Fn [(Ptr CChar)] Bool)",
      "info": {
        "line": 79,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "null?__CChar",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "(Fn [(Ptr FILE)] Bool)",
      "info": {
        "line": 79,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "null?__FILE",
      "meta": {
        "hidden": "true"
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 7,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "or",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 217,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "or*",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 82,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Dynamic.carp"
      },
      "isBuiltIn": false,
      "symbol": "pkg-config",
      "meta": {}
    },
    {
      "type": "(Fn [a] Bool)",
      "info": {
        "line": 67,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "pos?",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 72,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "posix-only",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 43,
        "column": 27,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "posix-target?",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 89,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/IO.carp"
      },
      "isBuiltIn": false,
      "symbol": "print*",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 94,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "print-doc",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 102,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "print-sig",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 86,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/IO.carp"
      },
      "isBuiltIn": false,
      "symbol": "println*",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 110,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "private",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 118,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "private?",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 2,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Project.carp"
      },
      "isBuiltIn": false,
      "symbol": "project-config",
      "meta": {}
    },
    {
      "type": "(Fn [] a)",
      "info": {
        "line": 104,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "random--1-1",
      "meta": {}
    },
    {
      "type": "(Fn [] a)",
      "info": {
        "line": 101,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "random-0-1",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "ref",
      "meta": {
        "doc": "\"is used to take references. Long form of `&expression`.\\n\\nExample:\\n```\\n(ref expression)\\n```\""
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 177,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "refstr",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 98,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Dynamic.carp"
      },
      "isBuiltIn": false,
      "symbol": "relative-to",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 260,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "save-docs",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "set!",
      "meta": {
        "doc": "\"is used to rebind a variable.\\n\\nExample:\\n```\\n(set! var new-value)\\n```\""
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 98,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "sig",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 488,
        "column": 4,
        "file": "/Users/oliverfencott/.carp/core/String.carp"
      },
      "isBuiltIn": false,
      "symbol": "str*",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 181,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "swap!",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 18,
        "column": 24,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "target-abi",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 12,
        "column": 25,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "target-arch",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 47,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "target-only",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 15,
        "column": 23,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "target-os",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 22,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "target-os?",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 6,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "target-triple",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "the",
      "meta": {
        "doc": "\"is used to annotating expressions.\\n\\nExample:\\n```\\n(the Type expression)\\n```\""
      }
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 2,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "thread-first-internal",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 17,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "thread-last-internal",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 114,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "todo",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 111,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "unless",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 247,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "unreachable",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 90,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "until",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 184,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "update!",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 196,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "use-all",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 187,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Macros.carp"
      },
      "isBuiltIn": false,
      "symbol": "use-all-fn",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 108,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "when",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "while",
      "meta": {
        "doc": "\"is used for loops.\\n\\nExample:\\n```\\n(while true\\n  (loop-forever))\\n```\""
      }
    },
    {
      "type": "Macro",
      "info": {
        "line": 98,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/ControlMacros.carp"
      },
      "isBuiltIn": false,
      "symbol": "while-do",
      "meta": {}
    },
    {
      "type": "Macro",
      "info": {
        "line": 68,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "windows-only",
      "meta": {}
    },
    {
      "type": "Dynamic",
      "info": {
        "line": 26,
        "column": 3,
        "file": "/Users/oliverfencott/.carp/core/Platform.carp"
      },
      "isBuiltIn": false,
      "symbol": "windows-target?",
      "meta": {}
    },
    {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "with",
      "meta": {
        "doc": "\"makes modules available locally. Like `use`, but not global.\\n\\nExample:\\n```\\n(with Module expression-with-module)\\n```\""
      }
    },
    {
      "type": "(Fn [a] Bool)",
      "info": {
        "line": 64,
        "column": 2,
        "file": "/Users/oliverfencott/.carp/core/Generics.carp"
      },
      "isBuiltIn": false,
      "symbol": "zero?",
      "meta": {}
    }
  ],
  "builtIns": {
    "break": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "break",
      "meta": {
        "doc": "\"is used to break out of loops.\\n\\nExample:\\n```\\n(while true\\n  (break))\\n```\""
      }
    },
    "def": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "def",
      "meta": {
        "doc": "\"is used to bind a variable.\\n\\nExample:\\n```\\n(def variable \\\"value\\\")\\n```\""
      }
    },
    "defn": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "defn",
      "meta": {
        "doc": "\"is used to define a function.\\n\\nExample:\\n```\\n(defn name [arg] body)\\n```\""
      }
    },
    "deref": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "deref",
      "meta": {
        "doc": "\"is used to call references. Long form of `~expression`.\\n\\nExample:\\n```\\n(deref expression)\\n```\""
      }
    },
    "do": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "do",
      "meta": {
        "doc": "\"is used to group statements.\\n\\nExample:\\n```\\n(do (println* \\\"hi\\\") 1) ; => 1\\n```\""
      }
    },
    "fn": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "fn",
      "meta": {
        "doc": "\"is used to define anonymous functions.\\n\\nExample:\\n```\\n(fn [arg] body)\\n```\""
      }
    },
    "if": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "if",
      "meta": {
        "doc": "\"is used for conditional expressions.\\n\\nExample:\\n```\\n(if conditional\\n  then-branch\\n  else-branch)\\n```\""
      }
    },
    "let": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "let",
      "meta": {
        "doc": "\"is used to introduce local variables.\\n\\nExample:\\n```\\n(let [var-name expression]\\n  body-with-var-defined)\\n```\""
      }
    },
    "match": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "match",
      "meta": {
        "doc": "\"is used for matching on sumtypes.\\n\\nExample:\\n```\\n(match expression-returing-a-sumtype\\n  (Constructor value) (something-with value)\\n  _ \\\"wildcard\\\")\\n```\""
      }
    },
    "match-ref": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "match-ref",
      "meta": {
        "doc": "\"is used for matching, like `match`, but takes references.\\n\\nExample:\\n```\\n(match-ref expression-sumtype-ref\\n  (Constructor value-ref) value-ref\\n  _ \\\"wildcard\\\")\\n```\""
      }
    },
    "ref": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "ref",
      "meta": {
        "doc": "\"is used to take references. Long form of `&expression`.\\n\\nExample:\\n```\\n(ref expression)\\n```\""
      }
    },
    "set!": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "set!",
      "meta": {
        "doc": "\"is used to rebind a variable.\\n\\nExample:\\n```\\n(set! var new-value)\\n```\""
      }
    },
    "the": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "the",
      "meta": {
        "doc": "\"is used to annotating expressions.\\n\\nExample:\\n```\\n(the Type expression)\\n```\""
      }
    },
    "while": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "while",
      "meta": {
        "doc": "\"is used for loops.\\n\\nExample:\\n```\\n(while true\\n  (loop-forever))\\n```\""
      }
    },
    "with": {
      "type": null,
      "info": null,
      "isBuiltIn": true,
      "symbol": "with",
      "meta": {
        "doc": "\"makes modules available locally. Like `use`, but not global.\\n\\nExample:\\n```\\n(with Module expression-with-module)\\n```\""
      }
    }
  }
}